<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>1024子翔的程序人生</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-01T03:36:38.225Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Choicelin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅谈BEM命名法则</title>
    <link href="http://yoursite.com/2018/07/01/%E6%B5%85%E8%B0%88BEM%E5%91%BD%E5%90%8D%E6%B3%95%E5%88%99/"/>
    <id>http://yoursite.com/2018/07/01/浅谈BEM命名法则/</id>
    <published>2018-07-01T03:16:33.000Z</published>
    <updated>2018-07-01T03:36:38.225Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h2><ul><li><p>独立的有意义的实体</p><blockquote><p>比如<code>header</code>, <code>container</code>,<code>menu</code>,<code>checkbox</code>,<code>input</code></p></blockquote></li></ul><h2 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h2><ul><li><p>Block中的没有独立意义，但是语义上与Block有联系的部分</p><blockquote><p>比如<code>menu item</code>,<code>list item</code>,<code>checkbox caption</code>,<code>title</code>,<code>header</code></p></blockquote></li></ul><h2 id="Modifier"><a href="#Modifier" class="headerlink" title="Modifier"></a>Modifier</h2><ul><li><p>Block和Element的标志，用来改变Block和Element的行为</p><blockquote><p>比如<code>disabled</code>,<code>highlighted</code>,<code>checked</code>,<code>fixed</code>,<code>size big</code>,<code>color yellow</code></p></blockquote></li></ul><h2 id="常见使用方式举例"><a href="#常见使用方式举例" class="headerlink" title="常见使用方式举例"></a>常见使用方式举例</h2><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button"</span>&gt;</span></span><br><span class="line">&gt; Normal button</span><br><span class="line">&gt; <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button button--state-success"</span>&gt;</span></span><br><span class="line">&gt; Success button</span><br><span class="line">&gt; <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button button--state-danger"</span>&gt;</span></span><br><span class="line">&gt; Danger button</span><br><span class="line">&gt; <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>上面的例子用中划线分隔的三个部分就分别是Block,Element,Modifier。为什么要使用BEM方式来命名，从表现形式来看，是为了做到防止命名冲突，同时见名知意，目前有些项目会采取这种方式。</p><p>为了防止命名冲突有一种类似的方案是CSS MODULES。</p><p>总之命名还是比较重要，大家可以自行取舍，欢迎发邮件与我讨论。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Block&quot;&gt;&lt;a href=&quot;#Block&quot; class=&quot;headerlink&quot; title=&quot;Block&quot;&gt;&lt;/a&gt;Block&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;独立的有意义的实体&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;比如&lt;code&gt;header&lt;/cod
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>读王勇人生前28年有感</title>
    <link href="http://yoursite.com/2018/06/16/%E8%AF%BB%E7%8E%8B%E5%8B%87%E4%BA%BA%E7%94%9F%E5%89%8D28%E5%B9%B4%E6%9C%89%E6%84%9F/"/>
    <id>http://yoursite.com/2018/06/16/读王勇人生前28年有感/</id>
    <published>2018-06-16T01:56:54.000Z</published>
    <updated>2018-06-16T02:37:02.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于名字"><a href="#关于名字" class="headerlink" title="关于名字"></a>关于名字</h2><p>王勇，前deepIn linux项目负责人，最近因为个人原因离职了。我也是因为公司的同事才知道他这个人的。于是想搜索一下关于他的介绍，然后搜索到了他的一篇文章《我人生的前28年》。</p><h2 id="个人感受"><a href="#个人感受" class="headerlink" title="个人感受"></a>个人感受</h2><p>整体浏览了他的文章，感觉是个做事很直接的人，学习上直击要点，如果要干什么就会直接开始从要学的入手，而且不会有科班生的畏难，可能是他最开始的时候是初生牛犊不怕虎，但是正是这种精神让他敢于去学习一门科班生可能觉得难的东西。这只是个人看法，可能他本人不是这样想的，后来他继续钻研难的技术，我觉得就是他已经掌握了一套学习的方法。他是不像很多现在的普通程序员分java还是php，他基本用什么就学什么，不会区分语言。这一点我听过一个facebook的工程师说过，facebook招人主考算法，人招进去以后，会在各个部门实习两周左右，他们要求无论是前端还是后端，只要公司需要，你都能很快的转入进去，这其实就是考验一个人的思维能力，因为语言到后面只是工具，用这个工具的还是你这个人，人的思维好了，对什么都能快速上手，并且能够举一反三。回到王勇身上，这位前辈体验到了很多人生的辛酸苦辣，但是感觉他一直在编码，这对我也是一种激励，</p><p>就是再多挫折也要抗住，就是跌到以后微笑爬起来，而且我希望国内大龄的编码者越来越多，这样就不用所谓的程序员到35岁要转管理这种说法。如果你热爱技术，为什么要转管理，好好做技术不好么。感觉很多喜欢技术的人，都是无法抗拒外界因素转的管理，当然也有最后没机会做管理被淘汰的人，所以我理想的是，没有外界因素，只有一个很直接的工作，coder，能够做到最后。但是目前IT行业年纪最大的估计国内也没有到退休年龄，这些事情不知道最后是个怎么样的。</p><h2 id="自我"><a href="#自我" class="headerlink" title="自我"></a>自我</h2><p>今后我需要学习他的钻劲，啃。无论如何，我都要微笑迎接人生的困难，最后用王勇前辈的一句话结束：</p><blockquote><p>中国教育最大的失败在于他们没有给这些未成年人看到真实残酷的社会， 他们没有教在社会上生存最重要的东西： 就是跌到以后微笑爬起来， 人在社会上最重要的就是你每天都会面对痛苦的事情， 你不喜欢的事情， 不顺心的事情， 最起码在你能力还不能支撑你个人理想的时候， 你要怎么去面对你个人， 你的家人</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于名字&quot;&gt;&lt;a href=&quot;#关于名字&quot; class=&quot;headerlink&quot; title=&quot;关于名字&quot;&gt;&lt;/a&gt;关于名字&lt;/h2&gt;&lt;p&gt;王勇，前deepIn linux项目负责人，最近因为个人原因离职了。我也是因为公司的同事才知道他这个人的。于是想搜索一下关于
      
    
    </summary>
    
    
      <category term="读后感" scheme="http://yoursite.com/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>异步流程控制的两种思路</title>
    <link href="http://yoursite.com/2018/05/15/%E5%BC%82%E6%AD%A5%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%80%9D%E8%B7%AF/"/>
    <id>http://yoursite.com/2018/05/15/异步流程控制的两种思路/</id>
    <published>2018-05-15T15:13:49.000Z</published>
    <updated>2018-05-15T15:14:34.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异步流程控制的两种思路"><a href="#异步流程控制的两种思路" class="headerlink" title="异步流程控制的两种思路"></a>异步流程控制的两种思路</h1><ul><li>第一种在异步回调里面执行操作，这是最为常见的，扩展一下可以在回调参数里面再传回调，然后这个传入的回调里面执行可以保证异步逻辑走完了</li><li>思路二，我称之为赛跑回调，跟第一种有点类似，但是有细微的区别，有一个赛跑的感觉，也是在异步回调里面注册一个回调，把数据放到回调形参，这个回调可以在其他地方调用，在其他地方使用时，判断一下数据是否到位，如果到位了执行你的逻辑，如果没到位，执行回调，接受实参，设置数据，然后再执行你的逻辑。这就好比如果接口跑的快就不用调回调，跑得慢就调，所以好像赛跑一样。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;异步流程控制的两种思路&quot;&gt;&lt;a href=&quot;#异步流程控制的两种思路&quot; class=&quot;headerlink&quot; title=&quot;异步流程控制的两种思路&quot;&gt;&lt;/a&gt;异步流程控制的两种思路&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;第一种在异步回调里面执行操作，这是最为常见的，扩展一下可
      
    
    </summary>
    
    
      <category term="ajax" scheme="http://yoursite.com/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>node写接口无响应原因总结</title>
    <link href="http://yoursite.com/2018/05/15/node%E5%86%99%E6%8E%A5%E5%8F%A3%E6%97%A0%E5%93%8D%E5%BA%94%E5%8E%9F%E5%9B%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/05/15/node写接口无响应原因总结/</id>
    <published>2018-05-15T15:12:38.000Z</published>
    <updated>2018-05-15T15:13:12.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="可能原因"><a href="#可能原因" class="headerlink" title="可能原因"></a>可能原因</h1><ul><li>路由路径不对</li><li>未调用next</li><li>中间件问题</li></ul><p>debug方法 先注释全部路由以外的中间件，然后再依次打开，看是哪个中间件出问题</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;可能原因&quot;&gt;&lt;a href=&quot;#可能原因&quot; class=&quot;headerlink&quot; title=&quot;可能原因&quot;&gt;&lt;/a&gt;可能原因&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;路由路径不对&lt;/li&gt;
&lt;li&gt;未调用next&lt;/li&gt;
&lt;li&gt;中间件问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;deb
      
    
    </summary>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>前端工作积累的知识点二</title>
    <link href="http://yoursite.com/2018/05/15/%E5%89%8D%E7%AB%AF%E5%B7%A5%E4%BD%9C%E7%A7%AF%E7%B4%AF%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9%E4%BA%8C/"/>
    <id>http://yoursite.com/2018/05/15/前端工作积累的知识点二/</id>
    <published>2018-05-15T15:10:19.000Z</published>
    <updated>2018-05-25T15:01:43.882Z</updated>
    
    <content type="html"><![CDATA[<ol><li>picker、scroll-view上使用flex是无效的，需要在内部嵌套一层view再使用flex效果</li><li>filter(), concat() 和 slice()均不会修改原数组而是返回一个新数组</li><li>php var_dump()查看表达式的值和类型，gettype()类似js typeof, is_type()判断是否是type类型</li><li>php 布尔字面量是大写，(bool)可以强转，但是boolean才是类型字符 falsy值： FALSE，0，0.0，””, “0”, [], NULL尚未赋值变量还有一个空标记生成的Si没票了XML对象</li><li>php round()四舍五入，int()截断，php没有整除运算符</li><li>永远不要比较两个浮点数是否相等，如果硬要比较，可以使用机器极小值（epsilon）或最小单元取整数， 是计算中所能接受的最小的差别值</li><li>NAN用is_nan比较检查</li><li>用超出字符串长度的下标写入将会拉长该字符串并以空格填充，用负数下标读取字符串时返回空字符串， 写入时只用到了赋值字符串的第一个字符。用空字符串赋值则赋给的值是 NULL 字符</li><li>strval()可以转换为字符串，TRUE会被转为”1”,FALSE会被转为””</li><li>小程序app.js中所有接口获取到的内容都可以在小程序全部页面共享，app.global,切记</li><li>open页面是为了在A小程序中分享这个open页面，然后根据options，拼参数跳转到B小程序</li><li>koa2 ctx.type可以设置Content-Type</li><li>getter 后面跟的类似function的东西，其实名字是一个对象的属性，在用取值的时候执行里面的逻辑</li><li>最佳实践，在初始化生命周期中，拿数据及其配置操作时，最好加loading，在所有数据到位以后再做处理，这也是对异步流程的一种控制，所以说异步走到最后还是类似于同步的处理，也就是异步流程控制</li><li>query需要encodeURIComponent的时候不要把整个query进行encode，而是需要排除=，&amp;这种符号，否则会出问题</li><li>做手持弹幕，旋转90度时把宽为100vh高为100vw时，变形，是因为旋转中心没有居中，先把div居中(通过定位居中，flex居中会有问题)，再旋转，注意，不是调旋转中心，而是让要旋转的div居中</li><li>做定位居中和动画同时使用不同transform时，需要在动画里重复写</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;picker、scroll-view上使用flex是无效的，需要在内部嵌套一层view再使用flex效果&lt;/li&gt;
&lt;li&gt;filter(), concat() 和 slice()均不会修改原数组而是返回一个新数组&lt;/li&gt;
&lt;li&gt;php var_dump()
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>bug心路2</title>
    <link href="http://yoursite.com/2018/05/04/bug%E5%BF%83%E8%B7%AF2/"/>
    <id>http://yoursite.com/2018/05/04/bug心路2/</id>
    <published>2018-05-03T16:55:23.000Z</published>
    <updated>2018-05-03T17:00:25.232Z</updated>
    
    <content type="html"><![CDATA[<p>今天做一个node项目，遇到一个bug，刚开始没明显报错，定位都没法定位。</p><p>至于原因是用了别人的脚手架不太熟悉，这个脚手架把错误处理都搞得较为复杂。</p><p>后来搞了很久，把脚手架里面所有的错误处理全部替换为最简单的，然后报错就来了瞬间就解决了。</p><p>关于解决问题，如果想要解决就能够解决，现在越来越能够沉着的有耐心的去解决一个问题，对于复杂的东西就简单化，记得当年听一个大哥跟一个小弟，找一个最简单的示例，这个不够简单，再找一个。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天做一个node项目，遇到一个bug，刚开始没明显报错，定位都没法定位。&lt;/p&gt;
&lt;p&gt;至于原因是用了别人的脚手架不太熟悉，这个脚手架把错误处理都搞得较为复杂。&lt;/p&gt;
&lt;p&gt;后来搞了很久，把脚手架里面所有的错误处理全部替换为最简单的，然后报错就来了瞬间就解决了。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="心得体会" scheme="http://yoursite.com/tags/%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>给今后解决bug作参考-bug心路</title>
    <link href="http://yoursite.com/2018/04/10/%E7%BB%99%E4%BB%8A%E5%90%8E%E8%A7%A3%E5%86%B3bug%E4%BD%9C%E5%8F%82%E8%80%83-bug%E5%BF%83%E8%B7%AF/"/>
    <id>http://yoursite.com/2018/04/10/给今后解决bug作参考-bug心路/</id>
    <published>2018-04-10T12:57:59.000Z</published>
    <updated>2018-04-11T03:13:15.882Z</updated>
    
    <content type="html"><![CDATA[<ol><li>解决标准分bug的过程，或许对以后会有所启示，首先觉得是对的，与测试沟通，然后需求说确认要改，然后改，发现代码确实是跳结果页，找不到原因，询问小师父，发现是后台接口的一个问题导致不能支付，然后支付试一下，可以了，但是页面白屏，停一下，到这一步其实是关键，这个白屏的链接获取到，这是个突破点，然后就靠自己了，发现在结果页又发生了跳转，是一个参数控制是否跳转，打印该参数为undefined，取反，正好是触发了跳转，问题就集中在这里，继续刷新看获取该参数的接口跑了没，发现跑了，看是不是时机不对,果然，在render中写跳转，redux中数据还没有过来，换到componentWillReceiveProps里面，成功，bug终结</li></ol><p>思考：为什么自己没有坚持到找到白屏链接那一步？值得反思。值得赞赏的是，找到突破口以后，每一步的决策都是对的，从发现突破口到解决只花了很短一段时间。今后应该如何参考这个？首先，我少了一步，就是重现这个bug，只看代码，而不实际去测一下，值得批评。加油，阿翔，今后要成为全栈哦，从自己能够做的入手，不要跟别人比，脚踏实地去做。</p><p>分享一下，与我共勉</p><hr><p>第二天一来，发现事情并没有结束，支付以后还是跳回stats，没有考虑到一点，componentWillReceiveProps是服务全局的，任何新props来都会触发，就可能出现undefined的情况。</p><p>又要批评一下，改完了还是要自己多测一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;解决标准分bug的过程，或许对以后会有所启示，首先觉得是对的，与测试沟通，然后需求说确认要改，然后改，发现代码确实是跳结果页，找不到原因，询问小师父，发现是后台接口的一个问题导致不能支付，然后支付试一下，可以了，但是页面白屏，停一下，到这一步其实是关键，这个白屏
      
    
    </summary>
    
    
      <category term="程序人生" scheme="http://yoursite.com/tags/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习笔记</title>
    <link href="http://yoursite.com/2018/04/06/mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/04/06/mysql学习笔记/</id>
    <published>2018-04-06T00:17:08.000Z</published>
    <updated>2018-04-17T02:46:18.679Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mysql命令行"><a href="#mysql命令行" class="headerlink" title="mysql命令行"></a>mysql命令行</h2><h3 id="mysql登录"><a href="#mysql登录" class="headerlink" title="mysql登录"></a>mysql登录</h3><ul><li><p>查看版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -V</span><br></pre></td></tr></table></figure></li><li><p>root权限登录 p密码 P端口 h主机地址 回车后输入密码或者-p后跟密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p -P3306 -h127.0.0.1</span><br></pre></td></tr></table></figure></li></ul><h3 id="登录后退出"><a href="#登录后退出" class="headerlink" title="登录后退出"></a>登录后退出</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exit;</span><br><span class="line">quit;</span><br><span class="line">\q;</span><br></pre></td></tr></table></figure><h3 id="修改提示符"><a href="#修改提示符" class="headerlink" title="修改提示符"></a>修改提示符</h3><ul><li>\D完整日期 \d当前数据库 \h服务器名称\u当前用户   可以互相组合</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -proot --prompt \h</span><br></pre></td></tr></table></figure><ul><li>登录以后</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prompt mysql&gt;</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li><p>查版本、显示当前日期、显示当前用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT VERSION();</span><br><span class="line">SELECT NOW();</span><br><span class="line">SELECT USER();</span><br></pre></td></tr></table></figure></li></ul><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><ul><li>关键字、函数名称全部大写</li><li>数据库名称、表名称、字段名称全部小写</li><li>SQL语句必须以分号结尾</li></ul><h3 id="创建数据库示例"><a href="#创建数据库示例" class="headerlink" title="创建数据库示例"></a>创建数据库示例</h3><ul><li><p>最简单的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE t1;</span><br></pre></td></tr></table></figure></li><li><p>在未存在该数据库时才创建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS t1;</span><br></pre></td></tr></table></figure><blockquote><p>此时数据库存在，所以可以用SHOW WARNINGS;查看警告信息，SHOW CREATE DATABASE t1;可以查看创建t1的命令</p></blockquote></li><li><p>再加入编码方式</p></li></ul>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXIST t2 CHARACTER SET gbk;</span><br></pre></td></tr></table></figure><blockquote><p>如果想修改编码方式则参考下面的内容</p></blockquote><h3 id="查看当前服务器下的数据列表"><a href="#查看当前服务器下的数据列表" class="headerlink" title="查看当前服务器下的数据列表"></a>查看当前服务器下的数据列表</h3><ul><li><p>基本示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES;</span><br></pre></td></tr></table></figure></li></ul><h3 id="修改数据库示例"><a href="#修改数据库示例" class="headerlink" title="修改数据库示例"></a>修改数据库示例</h3><ul><li><p>修改除了没有IF NOT EXISTS 和 CREATE改为ALTER其他部分都一样，下面修改字符集</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER DATABASE t1 CHARACTER SET utf8;</span><br></pre></td></tr></table></figure></li></ul><h3 id="删除数据库示例"><a href="#删除数据库示例" class="headerlink" title="删除数据库示例"></a>删除数据库示例</h3><ul><li><p>删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE IF EXISTS t1;</span><br></pre></td></tr></table></figure></li></ul><h2 id="MySQL数据类型"><a href="#MySQL数据类型" class="headerlink" title="MySQL数据类型"></a>MySQL数据类型</h2><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><ul><li>TINYINT(-128-127,0-255) 1字节</li><li>SMALLINT(-32768-32767,0-65535) 2字节</li><li>MEDIUMINT(-8388608-8388607,0-4294967295) 3字节</li><li>INT(-2^31-2^31-1,0-2^32-1) 4字节</li><li>BIGINT(-2^63–2^63-1,0-2^64-1) 8字节</li></ul><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><ul><li>FLOAT[(M,D)]    M表示总位数D表示小数位数（小数最大7位）</li><li>DOUBLE[(M,D)] </li></ul><h3 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h3><ul><li>YEAR 1</li><li>TIME 3</li><li>DATE 3</li><li>DATETIME 8</li><li>TIMESTAMP(时间戳) 4</li></ul><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><ul><li>CHAR(M)   0&lt;=M&lt;=255字节  定长类型，不足以空格补位</li><li>VARCHAR(M)  L+1个字节，其中L&lt;=M且0&lt;=M&lt;=65535  变长类型，有多长存多长</li><li>TINYTEXT L+1个字节，其中L&lt;2^8</li><li>TEXT L+2个字节，其中L&lt;2^16</li><li>MEDIUMTEXT 3 24</li><li>LONGTEXT 4 32</li><li>ENUM(‘value1’,’value2’,…) 1或2个字节，取决于枚举个数（最多65535个值）</li><li>SET(‘value1’,’value2’,…) 1 2 3 4 8字节 取决于SET成员的数目最大64个成员</li></ul><h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><h3 id="USE"><a href="#USE" class="headerlink" title="USE"></a>USE</h3><ul><li><p>打开数据库(必须已经创建或已存在)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE t1;</span><br></pre></td></tr></table></figure></li></ul><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><ul><li><p>创建一个存储用户信息的表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tb1(</span><br><span class="line">username VARCHAR(20),</span><br><span class="line">age TINYINT UNSIGNED,</span><br><span class="line">salary FLOAT(8,2) UNSIGHED</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h3 id="查看数据表"><a href="#查看数据表" class="headerlink" title="查看数据表"></a>查看数据表</h3><ul><li><p>查看数据表列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW TABLES [FROM dbName(mysql)];</span><br></pre></td></tr></table></figure></li></ul><h3 id="查看数据表结构"><a href="#查看数据表结构" class="headerlink" title="查看数据表结构"></a>查看数据表结构</h3><ul><li><p>查看表结构是查看列</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW COLUMNS FROM tb1;</span><br></pre></td></tr></table></figure></li></ul><h3 id="插入记录与查询记录"><a href="#插入记录与查询记录" class="headerlink" title="插入记录与查询记录"></a>插入记录与查询记录</h3><ul><li><p>插入记录示例，如果省略列名称，需要全部赋值，还是以上面创建的用户信息表举例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT tb1 VALUES('Anger', 21, 7863.25);</span><br></pre></td></tr></table></figure></li><li><p>插入记录示例,不省略列名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT tb1(username, age) VALUES('Kira', 25);</span><br></pre></td></tr></table></figure></li><li><p>简单查询示例，*匹配的是字段而不是记录，有人会说*是匹配所有记录，这是有点问题的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM tb1;</span><br></pre></td></tr></table></figure></li></ul><h2 id="空值与非空"><a href="#空值与非空" class="headerlink" title="空值与非空"></a>空值与非空</h2><ul><li>NULL 字段值可以为空，设置的时候可以省略</li><li>NOT NULL 字段值禁止为空</li></ul><h2 id="自动编号"><a href="#自动编号" class="headerlink" title="自动编号"></a>自动编号</h2><ul><li>自动编号，必须与主键结合使用</li><li>默认情况下，起始值为1，每次的增量为1</li></ul><h2 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h2><ul><li><p>一张数据表中只能存在一个主键</p></li><li><p>主键保证记录的唯一性</p></li><li><p>主键自动为NOT NULL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tb3(</span><br><span class="line">id SMALLINT UNSIGHED AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">username VARCHAR(20) NOT NULL</span><br><span class="line">);</span><br><span class="line">SHOW COLUMNS FROM tb3;</span><br><span class="line">INSERT tb3(username) VALUES('Kira');</span><br><span class="line">SELECT * FROM tb3;</span><br></pre></td></tr></table></figure></li></ul><h2 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h2><ul><li>唯一约束可以保证记录的唯一性</li><li>唯一约束的字段可以为空值（NULL）</li><li>每张数据表可以存在多个唯一约束</li></ul><h2 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h2><ul><li><p>当插入记录时，如果未明确为字段赋值，则会赋予默认值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tb4(</span><br><span class="line">id SMALLINT NOT NULL AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">username VARCHAR(20) NOT NULL UNIQUE KEY,</span><br><span class="line">sex ENUM('1', '2', '3') DEFAULT '3'</span><br><span class="line">);</span><br><span class="line">SHOW COLUMNS FROM tb4;</span><br><span class="line">INSERT tb6(username, sex) VALUES('Tom', 1);</span><br><span class="line">INSERT tb6(username) VALUES('Rose');</span><br></pre></td></tr></table></figure></li></ul><h2 id="再谈约束"><a href="#再谈约束" class="headerlink" title="再谈约束"></a>再谈约束</h2><ol><li>约束保证数据的完整性和一致性</li><li>约束分为表级约束和列级约束，如果约束只针对某一个字段来约束，我们称之为列级约束，如果针对两个或两个以上字段来使用约束，则成为表级约束</li><li>约束类型包括（按功能分类）<ul><li>NOT NULL (非空约束)</li><li>PRIMARY KEY(主键约束)</li><li>UNIQUE KEY(唯一约束)</li><li>DEFAULT(默认约束)</li><li>FOREIGN KEY(外键约束)</li></ul></li></ol><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><ol><li>保持数据完整性和一致性</li><li>实现一对一或一对多的关系</li></ol><h3 id="外键约束要求"><a href="#外键约束要求" class="headerlink" title="外键约束要求"></a>外键约束要求</h3><ol><li>父表和子表必须使用相同的存储引擎，而且禁止使用临时表</li><li>数据表的存储引擎只能为InnoDB</li><li>外键列和参照列必须具有相似的数据类型。其中数字的长度或是是否有符号位必须相同，而字符长度则可以不同</li><li>外键列和参照列必须创建索引。如果外键列不存在索引的话，MySQL将会自动创建索引</li></ol><p>PS : </p><ul><li>子表是具有外键列的表，而子表所参照的表叫父表</li><li>外键列是加过FOREIGN关键字的列，而参照列则是外键列参照的列</li></ul><h4 id="编辑数据表的默认存储引擎"><a href="#编辑数据表的默认存储引擎" class="headerlink" title="编辑数据表的默认存储引擎"></a>编辑数据表的默认存储引擎</h4><ul><li><p>MySQL配置文件my.ini,修改完需重启MySQL服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default-storage-engine=INNODB</span><br></pre></td></tr></table></figure></li></ul><h3 id="外键约束示例"><a href="#外键约束示例" class="headerlink" title="外键约束示例"></a>外键约束示例</h3><ul><li><p>省份表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE provinces(</span><br><span class="line">id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">pname VARCAHR(20) NOT NULL</span><br><span class="line">);</span><br><span class="line">SHOW CREATE TABLE provinces;</span><br></pre></td></tr></table></figure></li><li><p>用户表,pid参照省份表（父表）的id字段</p></li></ul>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE users(</span><br><span class="line">  id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  username VARCHAR(10) NOT NULL,</span><br><span class="line">  pid BIGINT,</span><br><span class="line">  FOREIGN KEY (pid) REFERENCES provinces (id)</span><br><span class="line">  );</span><br></pre></td></tr></table></figure><p>  上述操作会报错，因为父表的id与子表的pid数据类型不相似</p><ul><li><p>修正后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE users(</span><br><span class="line"> id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line"> username VARCHAR(10) NOT NULL,</span><br><span class="line"> pid SMALLINT UNSIGNED,</span><br><span class="line"> FOREIGN KEY (pid) REFERENCES provinces(id)</span><br><span class="line"> );</span><br></pre></td></tr></table></figure></li></ul><h3 id="外键约束的参照操作"><a href="#外键约束的参照操作" class="headerlink" title="外键约束的参照操作"></a>外键约束的参照操作</h3><blockquote><p>这些操作是指在进行外键约束的情况下，在更新表的时候，子表是否也进行相应的操作</p></blockquote><ul><li><p>CASCADE</p><blockquote><p>父表更新或删除行，也会更新或删除子表中匹配的行。而且插入数据时必须先在父表中插入，然后才能在子表中插入，原因是子表是参照父表的信息，如果没有父表信息，将导致子表无法参照</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE users1(</span><br><span class="line">id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">username VARCHAR(20) NOT NULL,</span><br><span class="line">pid SMALLINT UNSIGNED,</span><br><span class="line">FOREIGN KEY (pid) REFERENCES provinces (id) ON DELETE CASCADE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">SHOW CREATE TABLE users1;</span><br><span class="line"></span><br><span class="line">INSERT provinces(pname) VALUES('A');</span><br><span class="line">INSERT provinces(pname) VALUES('B');</span><br><span class="line">INSERT provinces(pname) VALUES('C');</span><br><span class="line"></span><br><span class="line">SELECT * FROM provinces;</span><br><span class="line"></span><br><span class="line">INSERT users1(username, pid) VALUES('Tom', 3);</span><br><span class="line">INSERT users1(username, pid) VALUES('John', 1);</span><br><span class="line">INSERT users1(username, pid) VALUES('Rose', 3);</span><br><span class="line"></span><br><span class="line">SELECT * FROM users1;</span><br><span class="line"></span><br><span class="line">DELETE FROM provinces WHERE id = 3;</span><br><span class="line"></span><br><span class="line">SELECT * FROM provinces;</span><br><span class="line">SELECT * FROM users1;</span><br></pre></td></tr></table></figure></li><li><p>SET NULL</p><blockquote><p>父表删除和更新行时，会设置子表中的外键列为NULL，但是必须在子表外键列没有设置NOT NULL的情况下</p></blockquote></li><li><p>RESTRICT</p><blockquote><p>拒绝对父表进行删除和更新操作</p></blockquote></li><li><p>NO ACTION</p><blockquote><p>与RESTRICT相同</p></blockquote></li></ul><blockquote><p>在实际操作中，很少使用物理外键约束操作，而使用逻辑外键约束操作，原因是物理外键约束只有INNODB引擎才支持，逻辑外键就是我们在定义两张表的结构的时候，我们是按照存在着某种结构的方式去定义，但是不去使用FOREIGN KEY这个关键词来定义</p></blockquote><h3 id="表级约束与列级约束"><a href="#表级约束与列级约束" class="headerlink" title="表级约束与列级约束"></a>表级约束与列级约束</h3><blockquote><p>如果按照功能划分会有主键约束，非空约束，唯一约束。而如果按照参照操作数目的多少来划分，则有表级和列级约束</p></blockquote><ul><li><p>列级约束</p><blockquote><p>对一个列创建的约束，既可以在列定义时声明，也可以在列定义后声明</p></blockquote></li><li><p>表级约束</p><blockquote><p>对多个列创建的约束，只可以在列定义后声明</p></blockquote></li></ul><h3 id="修改数据表"><a href="#修改数据表" class="headerlink" title="修改数据表"></a>修改数据表</h3><blockquote><p>数据表的修改无非就是列的增加，列的删除，约束的添加，约束的删除等等一些操作</p></blockquote><ul><li><p>添加单列</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SHOW COLUMNS FROM users1;</span><br><span class="line"></span><br><span class="line">ALTER TABLE users1 ADD age TINYINT UNSIGNED NOT NULL DEFAULT 10;</span><br><span class="line">ALTER TABLE users1 ADD password VARCHAR(32) NOT NULL AFTER username;</span><br><span class="line">ALTER TABLE users1 ADD realname VARCHAR(20) NOT NULL FIRST;</span><br></pre></td></tr></table></figure></li><li><p>添加多列</p><blockquote><p>与上面的语法相似，在ADD后面加上括号，不能指定位置关系（FIRST,AFTER）</p></blockquote></li><li><p>删除列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE users1 DROP realname;</span><br><span class="line"></span><br><span class="line">SHOW COLUMNS FROM users1;</span><br><span class="line"></span><br><span class="line">ALTER TABLE users1 DROP username, DROP age;</span><br></pre></td></tr></table></figure></li><li><p>添加主键约束(默认B tree索引)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE users2(</span><br><span class="line">username VARCHAR(10) NOT NULL,</span><br><span class="line">pid SMALLINT UNSIGNED</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">SHOW CREATE TABLE users2;</span><br><span class="line"></span><br><span class="line">ALTER TABLE users2 ADD id SMALLINT UNSIGNED;</span><br><span class="line">ALTER TABLE users2 ADD CONSTRAINT PK_users2_id PRIMARY KEY (id);</span><br></pre></td></tr></table></figure></li><li><p>添加唯一约束</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE users2 ADD UNIQUE username;</span><br></pre></td></tr></table></figure></li><li><p>添加外键约束</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE users2 ADD FOREIGN KEY (pid) REFERENCES provinces (id);</span><br></pre></td></tr></table></figure></li><li><p>添加或删除默认约束</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE users2 ADD age SMALLINT UNSIGNED NOT NULL;</span><br><span class="line">ALTER TABLE users2 ALTER age SET DEFAULT 15;</span><br><span class="line">ALTER TABLE users2 ALTER age DROP DEFAULT;</span><br></pre></td></tr></table></figure></li><li><p>删除主键约束</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE users2 DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure></li><li><p>删除唯一约束 \G指以网格方式呈现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHOW INDEXES FROM users2\G;</span><br><span class="line">ALTER TABLE users2 DROP INDEX username;</span><br></pre></td></tr></table></figure></li><li><p>删除外键约束</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE TABLE users2;</span><br><span class="line">ALTER TABLE users2 DROP FOREIGN KEY users2_ibfk_1;</span><br></pre></td></tr></table></figure></li></ul><h3 id="修改列定义"><a href="#修改列定义" class="headerlink" title="修改列定义"></a>修改列定义</h3><ul><li><p>位置或列的类型有问题，是可以修改的,由大类型修改到小类型可能造成数据丢失</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE users2 MODIFY id SMALLINT UNSIGNED NOT NULL FIRST;</span><br><span class="line">SHOW COLUMNS FROM users2;</span><br></pre></td></tr></table></figure></li></ul><h3 id="修改列名称"><a href="#修改列名称" class="headerlink" title="修改列名称"></a>修改列名称</h3><ul><li><p>既可以修改到列名称又可以修改到列定义</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE users2 CHANGE pid p_id TINYINT UNSIGNED NOT NULL;</span><br><span class="line">SHOW COLUMNS FROM users2;</span><br></pre></td></tr></table></figure></li></ul><h3 id="修改数据表名称"><a href="#修改数据表名称" class="headerlink" title="修改数据表名称"></a>修改数据表名称</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE users2 RENAME users3;</span><br><span class="line"></span><br><span class="line">RENAME TABLE users3 to users2;</span><br></pre></td></tr></table></figure><h2 id="操作数据表中的记录"><a href="#操作数据表中的记录" class="headerlink" title="操作数据表中的记录"></a>操作数据表中的记录</h2><h3 id="插入记录"><a href="#插入记录" class="headerlink" title="插入记录"></a>插入记录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE users(</span><br><span class="line">id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">username VARCHAR(20) NOT NULL,</span><br><span class="line">password VARCHAR(32) NOT NULL,</span><br><span class="line">age TINYINT UNSIGNED NOT NULL DEFAULT 10,</span><br><span class="line">sex BOOLEAN </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT users VALUES(NULL, 'Tom', '123456', 15, 1);</span><br><span class="line">INSERT users VALUES(DEFAULT, 'John', '321', 15, 1);</span><br><span class="line">INSERT users SET username='Ben', password='456';</span><br></pre></td></tr></table></figure><h3 id="更新记录（单表更新）"><a href="#更新记录（单表更新）" class="headerlink" title="更新记录（单表更新）"></a>更新记录（单表更新）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">users</span> <span class="keyword">SET</span> age = age + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">users</span> <span class="keyword">SET</span> age = age - <span class="keyword">id</span>, sex = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">users</span> <span class="keyword">SET</span> age = age + <span class="number">10</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> % <span class="number">2</span> = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="删除记录（单表删除）"><a href="#删除记录（单表删除）" class="headerlink" title="删除记录（单表删除）"></a>删除记录（单表删除）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">6</span>;</span><br></pre></td></tr></table></figure><h3 id="查询记录"><a href="#查询记录" class="headerlink" title="查询记录"></a>查询记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, username <span class="keyword">FROM</span> <span class="keyword">users</span>;</span><br><span class="line"><span class="keyword">SELECT</span> username, <span class="keyword">id</span> <span class="keyword">FROM</span> <span class="keyword">users</span>;</span><br><span class="line"><span class="keyword">SELECT</span> users.id, users.username <span class="keyword">FROM</span> <span class="keyword">users</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">AS</span> userId, username <span class="keyword">AS</span> uname <span class="keyword">FROM</span> <span class="keyword">users</span>;</span><br></pre></td></tr></table></figure><p>( 未完待续)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;mysql命令行&quot;&gt;&lt;a href=&quot;#mysql命令行&quot; class=&quot;headerlink&quot; title=&quot;mysql命令行&quot;&gt;&lt;/a&gt;mysql命令行&lt;/h2&gt;&lt;h3 id=&quot;mysql登录&quot;&gt;&lt;a href=&quot;#mysql登录&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>css可以继承的属性</title>
    <link href="http://yoursite.com/2018/04/04/css%E5%8F%AF%E4%BB%A5%E7%BB%A7%E6%89%BF%E7%9A%84%E5%B1%9E%E6%80%A7/"/>
    <id>http://yoursite.com/2018/04/04/css可以继承的属性/</id>
    <published>2018-04-03T22:16:29.000Z</published>
    <updated>2018-04-03T22:43:32.278Z</updated>
    
    <content type="html"><![CDATA[<ol><li>font-size</li><li>text-indent</li><li>text-align</li><li>line-height</li><li>word-spacing</li><li>letter-spacing</li><li>text-transform</li><li>color</li><li>visibility</li><li>cursor</li><li>direction</li><li>font</li><li>font-family</li><li>font-style</li><li>font-weight</li><li>list-style</li></ol><p>———————————————— 不常用 —————————————————–</p><ol><li>caption-side</li><li>font-variant</li><li>list-style-position</li><li>list-style-type</li><li>border-collapse</li><li>border-spacing</li><li>empty-cells</li><li>table-layout</li><li>list-style-type</li><li>list-style-image</li><li>quotes</li><li>page</li><li>page-break-inside</li><li>widows</li><li>orphans</li><li>speak</li><li>speak-punctuation</li><li>speak-numeral</li><li>speak-header</li><li>speech-rate</li><li>volume</li><li>voice-family</li><li>pitch</li><li>pitch-range</li><li>stress</li><li>richness</li><li>azimuth</li><li>​</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;font-size&lt;/li&gt;
&lt;li&gt;text-indent&lt;/li&gt;
&lt;li&gt;text-align&lt;/li&gt;
&lt;li&gt;line-height&lt;/li&gt;
&lt;li&gt;word-spacing&lt;/li&gt;
&lt;li&gt;letter-spacing&lt;/li&gt;
&lt;li&gt;text
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>不要做一个初级工程师（译）</title>
    <link href="http://yoursite.com/2018/03/24/%E4%B8%8D%E8%A6%81%E5%81%9A%E4%B8%80%E4%B8%AA%E5%88%9D%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%EF%BC%88%E8%AF%91%EF%BC%89/"/>
    <id>http://yoursite.com/2018/03/24/不要做一个初级工程师（译）/</id>
    <published>2018-03-24T00:35:12.000Z</published>
    <updated>2018-03-24T02:22:53.415Z</updated>
    
    <content type="html"><![CDATA[<p>本文由林子翔翻译于<a href="https://hackernoon.com/dont-be-a-junior-developer-608c255b3056" target="_blank" rel="noopener">原文链接</a></p><ul><li><p>严肃地说，不要做一个初级工程师。一个初级工程师，把这个头衔放到他简历，邮箱和其他社交信息里，把它告诉世界。不要这样！</p></li><li><p>当你这样做了，人事和公司会这样看</p><blockquote><p>你好，我拼命想成为你们公司的一名开发者。我还是个新手，但是请你请你请你请请你在我身上赌一把而且希望我能够成为公司的一笔财富而不是债务，而且我在前6个月还需要其他同事的帮助。。。</p></blockquote></li><li><p>但是你说你就是一个初级工程师。这样的话，如果你专注于提高自己的技能去成为中级工程师会获得长远的成功，只有这样你才应该去申请一个工作。当你奉献你全部的时间去学习合理的技能，这时，你并不用把自己归为一个初级工程师这个品牌。记住，第一印象是很重要的，通过被录用为初级工程师，你将花费很长一段时间来摆脱这个头衔。如果你花一段时间去适应中级这个头衔，你将很快被录用为一个中级工程师。</p></li><li><p>但是你会问，什么时候你才知道自己不是一个中级工程师呢？你将永远不会知道。你将总是觉得自己知道得不够多，你将总是觉得其他人比你聪明，这被称作<a href="https://medium.com/@aliciatweet/overcoming-impostor-syndrome-bdae04e46ec5" target="_blank" rel="noopener">冒充者综合症</a>。这很正常，大部分开发者都会有这个症状。但是这里有一个小的测试针对网站开发者：你能清晰地给家人介绍Internet怎样工作？电脑怎么工作？网站怎么工作？是否对HTML,CSS,JavaScript有基础的认识而能够做一个网站？知道一点React吗？能够通过github做几个项目并不费力地发布到线上？如果以上你都能做到，很好，你不是一个初级的工程师。</p></li><li><p>但是，你说你现在就需要一个工作。停止这个不长远的想法。除非你的工作是被一群特别优秀一批人所围绕然后可以每天从他们那里学习到东西，而且是最新的相关技术。你的时间将会投资到学习技能去摆脱初级头衔。长远的来看，可能你会得到更多的钱、处在一个更好的团队、而且你将更可能去为一个可以教你和使用前沿技术的公司每天工作。不要做一个常驻的法律公司开发者，去做什么WordPress插件这种。那将不会长远的帮助你。</p></li></ul><p>注：这篇文章有点广告性质，所以只翻译了核心观点，作为一个开发者可以参考一下他的观点，个人觉得自己也有冒充者综合症，对该作者的大部分的观点是比较赞成的，但是我觉得有时候找工作涉及到的因素很多，这里有点片面，但不失为一篇不错的文章。这个冒充者综合症乃是直译，欢迎围观者提出更准确的翻译。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文由林子翔翻译于&lt;a href=&quot;https://hackernoon.com/dont-be-a-junior-developer-608c255b3056&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p
      
    
    </summary>
    
    
      <category term="翻译" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Router进行代码分片</title>
    <link href="http://yoursite.com/2018/03/19/%E4%BD%BF%E7%94%A8React%E5%92%8CReact%20Router%E8%BF%9B%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%88%86%E7%89%87/"/>
    <id>http://yoursite.com/2018/03/19/使用React和React Router进行代码分片/</id>
    <published>2018-03-19T00:58:50.000Z</published>
    <updated>2018-03-19T12:02:40.470Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用React和React-Router进行代码分片"><a href="#使用React和React-Router进行代码分片" class="headerlink" title="使用React和React Router进行代码分片"></a>使用React和React Router进行代码分片</h1><blockquote><p>本文由林子翔翻译自<a href="https://medium.freecodecamp.org/code-splitting-with-react-and-react-router-62e174382d4c" target="_blank" rel="noopener">原文链接</a></p></blockquote><ul><li><p>代码分片可以让你把应用分成多个包，使你的用户能逐步加载应用而变得流行起来。在这篇文章中，我们将会看一下什么是代码分片和怎么去做，了解怎么去配合React Router去实现它。</p></li><li><p>现在是2018年。你的用户不需要为了一小块内容而去下载整个应用。如果一个用户下载所有的代码，仅仅是为了请求一个注册页面是毫无意义的。而且用户在注册时并不需要下载用户设置页的巨大富文本编辑器代码。如果要下载那么多内容的话，是很浪费的。而且对于一些用户，他们会抱怨不尊重没有特别好带宽的他们。这个点子近年不仅很热，而且实现难度以指数级降低。甚至还有有了一个很酷的名字，代码分片。</p></li><li><p>这个点子很简单，即按需加载。实践的话，它可能有一点复杂。而复杂的原因并不是代码分片本身，而是现在有各种各样的工具来做这个事情。而且每个人对哪个方式最好都有自己的看法。当你第一次开始着手的时候，可能很困难分析什么是什么。</p></li><li><p>最常见的两种做法是使用Webpack和它的包加载器（bundle-loader），或者使用ECMAScript的stage3提案的动态import()。任何机会不用Webpack，我就不用，因此在这篇文章中，我将会使用动态import()。</p></li><li><p>如果你很熟悉ES模块，你应该知道它们是静态的。意思就是说你必须在编译时确定你要引入和导出的内容，而不是运行时。这也意味着你不能基于一些条件来动态导入一个模块。导入的内容必须声明在文件的最开头否则会抛出一个错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!user) &#123;</span><br><span class="line">    <span class="keyword">import</span> * <span class="keyword">as</span> api <span class="keyword">from</span> <span class="string">'./api'</span> <span class="comment">//不能这样做，“import”和“export”只能出现在文件顶部</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>现在，如果import不需要是静态的怎么办？意味着上面的代码可以工作?将会给我们带来什么好处？首先这意味着我可以按着需要加载某个模块。这非常强大，它让我们更接近按用户需要下载代码的想象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (editPost === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">import</span> * <span class="keyword">as</span> edit <span class="keyword">from</span> <span class="string">'./editpost'</span></span><br><span class="line">    </span><br><span class="line">    edit.showEditor()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>假设<strong>editpost</strong>包含一个非常大的富文本编辑器，我们需要保证用户在没有使用它的时候不会去下载它。</p></li><li><p>另外一个很酷的例子用于遗留支持。你可以在浏览器确定确实没有的时候才下载对应代码。</p></li><li><p>好消息（我在上文中曾间接提及）。这种类型的方法确实存在，它被Create React App（React项目的一种官方创建方法）支持,而且它是ECMAScript stage3的提案。不同的是替换了你之前使用import的方式。它使用起来像一个方法，并返回一个Promise，一旦模块完全加载，就会把这个模块resolve回来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (editPost === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">import</span>(<span class="string">'./editpost'</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">module</span> =&gt;</span> <span class="built_in">module</span>.showEditor())</span><br><span class="line">      .catch(<span class="function"><span class="params">e</span> =&gt;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>特别好，对吧？</p></li><li><p>现在我们知道怎么动态引入模块了，下一步是找出怎么结合React和React Router来使用它。</p></li><li><p>第一个（可能是最大的一个）问题，我们对React代码分片时，我们应该对哪里进行分片？典型的回答有两个</p><ol><li>在路由的层次上分片</li><li>在组件的层次上分片</li></ol></li><li><p>而更加常见的做法是在路由的层次上进行分片。你已经把你的应用分成了不同的路由，因此根据这个来代码分片是自然而然的事情。</p></li><li><p>让我以一个简单的React Router例子开始。我们将有三条路由分别是： <strong>/</strong>，<strong>/topics</strong>，<strong>/settings</strong>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    BrowserRouter <span class="keyword">as</span> Router,</span><br><span class="line">    Route,</span><br><span class="line">    Link,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./Home'</span></span><br><span class="line"><span class="keyword">import</span> Topics <span class="keyword">from</span> <span class="string">'./Topics'</span></span><br><span class="line"><span class="keyword">import</span> Settings <span class="keyword">from</span> <span class="string">'./Settings'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          &lt;Router&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">              &lt;ul&gt;</span><br><span class="line">              &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">'/'</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">   &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">'/topics'</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span> </span><br><span class="line">                &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">'/settings'</span>&gt;</span>Settings<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">              &lt;<span class="regexp">/ul&gt;    </span></span><br><span class="line"><span class="regexp">                </span></span><br><span class="line"><span class="regexp">              &lt;hr /</span>&gt;</span><br><span class="line">              </span><br><span class="line">              &lt;Route exact path=<span class="string">'/'</span> component=&#123;Home&#125; /&gt;</span><br><span class="line">              &lt;Route exact path=<span class="string">'/topics'</span> component=&#123;Topics&#125; /&gt;</span><br><span class="line">  &lt;Route exact path=<span class="string">'/settings'</span> component=&#123;Settings&#125; /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>Router&gt;  </span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure></li><li><p>现在，假设我们的<strong>/settings</strong>路由内容非常多。它包含一个富文本编辑器，和一个原始超级马里奥兄弟的拷贝，和盖伊法利的高清图片。当用户不在<strong>/settings</strong>路由上时，我们不想让他们下载全部这些内容。让我们使用我们React和动态引入（import()）的知识来分片<strong>/settings</strong>路由。</p></li><li><p>就像我们在React里解决任何问题一样，我们先写一个组件。我们将叫它<strong>DynamicImport</strong>。这个组件的目的是动态的加载一个模块，只要模块加载好了，就把它传给它子节点（children）。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Settings = <span class="function">(<span class="params">props</span>) =&gt;</span> (</span><br><span class="line">  &lt;DynamicImport load=&#123;() =&gt; <span class="keyword">import</span>(<span class="string">'./Settings'</span>)&#125;&gt;</span><br><span class="line">    &#123;(Component) =&gt; Component === <span class="literal">null</span> </span><br><span class="line">       ? <span class="xml"><span class="tag">&lt;<span class="name">Loading</span> /&gt;</span> </span></span><br><span class="line">       : &lt;Component &#123;...props&#125; /&gt;&#125;</span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">DynamicImport</span>&gt;</span></span></span><br><span class="line"><span class="xml">)</span></span><br></pre></td></tr></table></figure></li><li><p>上面的代码告诉我们两个重要的要素。第一，这个组件在执行时会接受一个属性<strong>load</strong>，将使用我们前面提到的语法动态引入一个模块。第二，这个组件会接受一个函数作为他的子节点，这个函数需要和引入进来的模块一起调用。</p></li><li><p>在我们深入思考<strong>DynamicImport</strong>的实现的之前，让我们想一下我们会怎么实现。第一件事我们需要确定的是要调用props.load。这让我们返回一个Promise，当它resolve的时候应该返回模块。接着，一旦我们有了模块，我们需要一种方式去触发重渲染，因此我们要把模块传给props.children并且调用它。怎样在React里面触发重渲染呢？设置state（setState）。通过把动态引入的模块加入到<strong>DynamicImport</strong>的state里面，就像我们之前使用的一样，我们遵循和React同样的过程- 获取数据 -&gt; 设置到state里 -&gt; 重渲染。而这一次我们只是把获取数据替换成了引入模块。</p></li><li><p>好了，首先，让我们加入初始的状态到组件里。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DynamicImport</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        component: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>现在，我们需要调props.load方法。这将返回一个promise同时在resolve后有一个模块</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DynamicImport</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        component: <span class="literal">null</span></span><br><span class="line">    &#125; </span><br><span class="line">    componentWillMount () &#123;</span><br><span class="line">        <span class="keyword">this</span>.props.load()</span><br><span class="line">            .then(<span class="function"><span class="params">component</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(<span class="function"><span class="params">()</span> =&gt;</span>｛</span><br><span class="line">                  component</span><br><span class="line">                 )&#125;           </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这里有一个疑难杂症。如果我们ES模块和commonjs模块混用时，ES模块会有一个.default属性，而commonjs模块并没有。让我们改变一下代码，适应一下上面的情况。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.props.load()</span><br><span class="line">    .then(<span class="function"><span class="params">component</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        component: component.default ?</span><br><span class="line">component.default : component</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>现在我们动态引入的模块并且把它加入到了state里面，最后一件事就是render方法长什么样了。如果你会记得，当<strong>DynamicImport</strong>使用的时候，它看起来像这样</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Settings = <span class="function">(<span class="params">props</span>) =&gt;</span> (</span><br><span class="line">&lt;DynamicImport load=&#123;() =&gt; <span class="keyword">import</span>(<span class="string">'./Settings'</span>)&#125;&gt;</span><br><span class="line">        &#123;(Component) =&gt; Component === <span class="literal">null</span> </span><br><span class="line">            ? ＜Loading/&gt;</span><br><span class="line">        : <span class="xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span>&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">DynamicImport</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>注意我们给组件传了一个函数作为子节点。这意味着我们需要执行这个函数，传递的是这个引入在state里的组件。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DynamicImport</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        component: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">componentWillMount () &#123;</span><br><span class="line">    <span class="keyword">this</span>.props.load()</span><br><span class="line">            .then(<span class="function">(<span class="params">component</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">  component: component.default </span><br><span class="line">                    ? component.default</span><br><span class="line">                    : component</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.props.children(<span class="keyword">this</span>.state.component)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>欧了，现在任何时候我们动态引入一个模块，我们可以把它包裹在<strong>DynamicImport</strong>。如果我们之前尝试用这种方法到我们路由上，我们的代码会看起来像这样</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    BrowserRouter <span class="keyword">as</span> Router,</span><br><span class="line">    Route,</span><br><span class="line">    Link</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DynamicImport</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        component: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">componentWillMount () &#123;</span><br><span class="line">    <span class="keyword">this</span>.props.load()</span><br><span class="line">            .then(<span class="function">(<span class="params">component</span>) =&gt;</span>　&#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                    component: component.default </span><br><span class="line">                    ? component.default</span><br><span class="line">                    : component</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.children(<span class="keyword">this</span>.state.component)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function">(<span class="params">props</span>) =&gt;</span> (</span><br><span class="line">&lt;DynamicImport load=&#123;() =&gt; <span class="keyword">import</span>(<span class="string">'./Home'</span>)&#125;&gt;</span><br><span class="line">    &#123;(Component) =&gt; Component === <span class="literal">null</span> </span><br><span class="line">          ? <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Loading<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">            : <span class="xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">DynamicImport</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Topics = <span class="function">(<span class="params">props</span>) =&gt;</span> (</span><br><span class="line">&lt;DynamicImport load=&#123;() =&gt; <span class="keyword">import</span>(<span class="string">'./Settings'</span>)&#125;&gt;</span><br><span class="line">    &#123;(Component) =&gt; Component === <span class="literal">null</span> </span><br><span class="line">        ? <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Loading<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">            : <span class="xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...props</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">DynamicImport</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        &lt;Router&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">'/'</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">                        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">'/topics'</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">                        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">'/settings'</span>&gt;</span>Settings<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">                    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;hr /</span>&gt;</span><br><span class="line">                    &lt;Route exact path=<span class="string">'/'</span> component=&#123;Home&#125; /&gt;</span><br><span class="line">                    &lt;Route path=<span class="string">'/topics'</span> component=&#123;Topics&#125; /&gt;</span><br><span class="line">                    &lt;Route path=<span class="string">'/settings'</span> component=&#123;Settings&#125; /&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Router&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><p>我们怎么知道这个确实起作用并且分片了我们的路由呢？如果你用一个React官方的Create React App创建一个应用跑一下<strong>npm run build</strong>，你将看到应用被分片了。</p><p><img src="./chunk.png" alt="包"></p></li><li><p>每一个包被一一引入进了我们的应用</p></li><li><p>你到了这一步，可以跳个舞轻松一下了</p></li><li><p>还记得我讲到有两种层级的代码分片方式吗？我们曾放在手边的引导</p><ol><li>以路由层级分片</li><li>以组建层级分片</li></ol></li><li><p>至此，我们只讲了路由层级的代码分片。到这里很多人就停止了。在路由层级上代码分片，就像刷牙一样，你天天刷，牙齿大部分很干净，但是还会有蛀牙。</p></li><li><p>除了思考用路由的分片方式，你应该想想怎么用组件的方式去分片。如果你在弹层里面有很多内容，路由分片还是会下载弹层的代码，无论这个弹层是否显示。</p></li><li><p>从这一点看，它更多是在你大脑里的一种变更而不是新知识。你已经知道如何使用动态引入，现在你需要找出哪些组件是在用到时才要下载的。</p></li><li><p>如果我不提React Loadable那我就是哑巴了。它是一个“通过动态引入加载组件的高阶组件”。重要的是，它处理所有我们提到的事情，并把它做成了一个精致的API。它甚至处理了很多很边角的事情，比如我们没有考虑服务端渲染和错误处理。看看它吧，如果你想要一个简单，开箱即用的解决方案的话。</p><p>​</p><p>(完，逃)</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用React和React-Router进行代码分片&quot;&gt;&lt;a href=&quot;#使用React和React-Router进行代码分片&quot; class=&quot;headerlink&quot; title=&quot;使用React和React Router进行代码分片&quot;&gt;&lt;/a&gt;使用React和
      
    
    </summary>
    
    
      <category term="翻译" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>wepy开发速查手册</title>
    <link href="http://yoursite.com/2018/03/11/wepy%E5%BC%80%E5%8F%91%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/"/>
    <id>http://yoursite.com/2018/03/11/wepy开发速查手册/</id>
    <published>2018-03-11T08:25:24.000Z</published>
    <updated>2018-03-13T09:49:35.449Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>事件bindtap=”click”替换为@tap=”click”,防止冒泡@tap.stop,防止捕获@tap.capture.stop，如果是@someEvent.user=”somefunction”，这种通过this.$emit(‘someEvent’),someFunction会触发而且写在父组件methods里面，同时父组件events里面的someEvent时不会执行</p><p>events示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// events对象中所声明的函数为用于监听组件之间的通信与交互事件的事件处理函数</span></span><br><span class="line">    events = &#123;</span><br><span class="line">        <span class="string">'someEvent'</span>: <span class="function">(<span class="params">p1, p2, p3, $event</span>) =&gt;</span> &#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.$name&#125;</span> receive <span class="subst">$&#123;$event.name&#125;</span> from <span class="subst">$&#123;$event.source.$name&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>事件传参变更，bindtap=”click” data-index=”“更改为@tap=”click()”</p></li><li><p>repeat使用实例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注意，使用for属性，而不是使用wx:for属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repeat</span> <span class="attr">for</span>=<span class="string">"&#123;&#123;list&#125;&#125;"</span> <span class="attr">key</span>=<span class="string">"index"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">item</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 插入&lt;script&gt;脚本部分所声明的child组件，同时传入item --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span> <span class="attr">:item</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repeat</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>computed计算属性，只要是组件中有任何数据发生了改变，那么所有计算属性就都会被重新计算，代码中可通过<code>this.计算属性名</code>来引用，模板中也可通过<code></code>来绑定数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">  a: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算属性aPlus，在脚本中可通过this.aPlus来引用，在模板中可通过&#123;&#123; aPlus &#125;&#125;来插值</span></span><br><span class="line">computed = &#123;</span><br><span class="line">  aPlus () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>watcher监听器， 通过监听器<code>watcher</code>能够监听到任何属性的更新</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">  num: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听器函数名必须跟需要被监听的data对象中的属性num同名，</span></span><br><span class="line"><span class="comment">// 其参数中的newValue为属性改变后的新值，oldValue为改变前的旧值</span></span><br><span class="line">watch = &#123;</span><br><span class="line">  num (newValue, oldValue) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`num value: <span class="subst">$&#123;oldValue&#125;</span> -&gt; <span class="subst">$&#123;newValue&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数据绑定使用:号比如，不使用冒号是绑定字符串常量，sync不加，父组件这个变量变化就不会影响子组件，加了sync，同时，写了twoWay: true时就是双向绑定，即同一个属性（props）的变化，父修改了影响子，子修改了影响父</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child</span> <span class="attr">:title</span>=<span class="string">"parentTitle"</span> <span class="attr">:syncTitle.sync</span>=<span class="string">"parentTitle"</span> <span class="attr">:twoWayTitle</span>=<span class="string">"parentTitle"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">props = &#123;</span><br><span class="line">    <span class="comment">// 静态传值</span></span><br><span class="line">    title: <span class="built_in">String</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 父向子单向动态传值</span></span><br><span class="line">    syncTitle: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">'null'</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="comment">//这里即twoWay</span></span><br><span class="line">    twoWayTitle: &#123;</span><br><span class="line">        type: <span class="built_in">Number</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">'nothing'</span>,</span><br><span class="line">        twoWay: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>通信</p><p>父组件发起的：$broadcast（特性：所有子组件都会收到此广播事件，顺序由上至下，广度优先）</p><p>子组件发起的：$emit（特性：事件发起组件的所有祖先组件会依次接收到事件,顺序由下至上)</p><p>组件间发起的：$invoke (特性：一个页面或组件对另一个组件中的方法的直接调用)</p><p>$invoke示例(这里能否用到alias路径，大家可以试试)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$invoke(<span class="string">'./../ComB/ComG'</span>, <span class="string">'someMethod'</span>, <span class="string">'someArgs'</span>);</span><br></pre></td></tr></table></figure><p>回调均在events对象里面写</p></li><li><p>wxs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  text: &apos;This is from wxs&apos;,</span><br><span class="line">  filter: function (num) &#123;</span><br><span class="line">    return num.toFixed(2);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// index.wpy</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;text&gt;&#123;&#123;m1.text&#125;&#125;&lt;/text&gt;</span><br><span class="line">  &lt;text&gt;&#123;&#123;m1.filter(num)&#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import wepy from &apos;wepy&apos;;</span><br><span class="line">  import mywxs from &apos;../wxs/mywxs.wxs&apos;;</span><br><span class="line"></span><br><span class="line">  export default class Index extends wepy.page &#123;</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">      num: 10</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    wxs = &#123;</span><br><span class="line">      m1: mywxs</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;事件bindtap=”click”替换为@tap=”click”,防止冒泡@tap.stop,防止捕获@tap.capture.stop，如果是@someEvent.user=”somefunction”，这种通过this.$emit(‘someEvent
      
    
    </summary>
    
    
      <category term="wepy" scheme="http://yoursite.com/tags/wepy/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序api之setEnableDebug说明</title>
    <link href="http://yoursite.com/2018/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fapi%E4%B9%8BsetEnableDebug%E8%AF%B4%E6%98%8E/"/>
    <id>http://yoursite.com/2018/03/04/微信小程序api之setEnableDebug说明/</id>
    <published>2018-03-04T07:20:01.000Z</published>
    <updated>2018-03-04T07:29:09.267Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line">onLaunch() &#123;</span><br><span class="line">  <span class="comment">//开启调试</span></span><br><span class="line">  wx.setEnableDebug(&#123;</span><br><span class="line">    enableDebug: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h1><ul><li>这个接口相当于是用代码来在预览时开启调试，预览后打开小程序后会提示“重新打开小程序后生效”，点击确定后，在微信-发现-小程序中打开小程序，此时右下角会出现一个绿色可拖动的vConsole，可以显示调试信息</li><li>另一种非代码开启方式是点击小程序右上角的胶囊中三个点符号，在这里点击打开调试，会和上面讲的一样，出现同样的过程</li><li>如果设置enableDebug为false，会同样出现上述过程的逆过程，是一样的道理</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h1&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
      
    
    </summary>
    
    
      <category term="微信小程序" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程入门</title>
    <link href="http://yoursite.com/2018/02/28/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/02/28/函数式编程入门/</id>
    <published>2018-02-28T14:02:09.000Z</published>
    <updated>2018-03-04T05:24:43.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是函数式编程"><a href="#什么是函数式编程" class="headerlink" title="什么是函数式编程"></a>什么是函数式编程</h1><p>函数式编程，个人理解是在编写纯函数。</p><p>据印度Anto Aravinth的解释的函数式编程是一种范式，我们能依靠这种范式创建仅依赖输入就可以完成自身逻辑的函数。</p><p>而这种函数就是我所理解的纯函数。</p><h2 id="纯函数特点"><a href="#纯函数特点" class="headerlink" title="纯函数特点"></a>纯函数特点</h2><ul><li>同样的输入，输出一定相同</li><li>函数不会改变任何外部环境的变量</li></ul><h2 id="函数式编程的引用透明性"><a href="#函数式编程的引用透明性" class="headerlink" title="函数式编程的引用透明性"></a>函数式编程的引用透明性</h2><blockquote><p>即所有函数对于相同输入都返回相同的值，那么据此产生了一个术语，叫替换模型，即把一个函数的调用用它的返回值替换，这将带来可以缓存的代码，当函数调用以后，我们将它的返回值存在内存里（比如用一个对象的属性存起来），下次使用就直接取对象这个属性映射的值。</p></blockquote><h2 id="并发优势"><a href="#并发优势" class="headerlink" title="并发优势"></a>并发优势</h2><ul><li>在并发层面上，由于函数不会对外部环境变量进行修改，只依赖传入的参数，所以，并发执行两个或多个一样的函数时相互之间不会受到影响</li></ul><h1 id="抽象与高阶函数"><a href="#抽象与高阶函数" class="headerlink" title="抽象与高阶函数"></a>抽象与高阶函数</h1><h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><ul><li>个人总结维基百科的表述，抽象即是一种管理复杂度的方法，把复杂度限定到你能处理的范围。这个范围层面的确定即是一种抽象。</li><li>比如高级程序语言就是一种抽象，它的底层是复杂的汇编语言以及机器语言，然而你把它抽象出来进行问题的处理，而不考虑底层复杂的调用和实现</li><li>抽象使我们关注预定的目标而不去考虑底层的细节实现</li></ul><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><ul><li>高阶函数就是接受函数作为参数并且/或者返回函数作为输出的函数</li><li>经常用到的比如map，forEach等</li></ul><h3 id="高阶函数的思维"><a href="#高阶函数的思维" class="headerlink" title="高阶函数的思维"></a>高阶函数的思维</h3><ul><li>高阶函数是一种声明式的抽象，声明式即研究“做什么”而不是“如何做”，而抽象使问题关注的地方更加单一，简单化</li><li>比如forEach函数抽象出了遍历数组这个过程，我们不用去关心如何去做遍历，而是专注于对每次遍历的结果的操作</li></ul><h1 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h1><h2 id="一元函数与多元函数"><a href="#一元函数与多元函数" class="headerlink" title="一元函数与多元函数"></a>一元函数与多元函数</h2><ul><li>只接受一个参数的函数叫一元函数，可以以此类推，几元函数就是接受几个参数的函数</li></ul><h2 id="变参函数"><a href="#变参函数" class="headerlink" title="变参函数"></a>变参函数</h2><ul><li>函数接受的参数不确定的函数叫做变参函数（比如使用arguments）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 变参函数</span><br><span class="line"> */</span><br><span class="line">function vary(...args) &#123;</span><br><span class="line">  console.log(args)</span><br><span class="line">  //do something to args</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="柯里化思想"><a href="#柯里化思想" class="headerlink" title="柯里化思想"></a>柯里化思想</h2><ul><li>所谓柯里化就是把多参函数转化为嵌套的单参函数</li></ul><h2 id="currying的一种实现"><a href="#currying的一种实现" class="headerlink" title="currying的一种实现"></a>currying的一种实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将多参函数转换为单参函数的一种实现</span></span><br><span class="line"><span class="comment"> * @params fn 需要转化的多参函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//异常处理</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'fn is not a function'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//转换处理</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">curryInner</span>(<span class="params">...args</span>) =&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//当传入函数的参数数目大于返回curryInner的参数长度时</span></span><br><span class="line">  <span class="keyword">if</span> (fn.length &gt; args.length)&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> curryInner.apply(<span class="literal">null</span>, args.concat([].slice.call(<span class="built_in">arguments</span>)))</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn.apply(<span class="literal">null</span>, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析举例"><a href="#分析举例" class="headerlink" title="分析举例"></a>分析举例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试函数作为实参传递</span></span><br><span class="line"><span class="comment"> * @params x, y, z</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> curriedFn = curry(foo);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此时curriedFn为 </span></span><br><span class="line"><span class="comment"> * function curryInner(...args) =&gt; &#123;  </span></span><br><span class="line"><span class="comment"> * if (fn.length &gt; args.length)&#123;</span></span><br><span class="line"><span class="comment"> *      return function() &#123;</span></span><br><span class="line"><span class="comment"> *       return curryInner.apply(null, args.concat([].slice.call(arguments)))</span></span><br><span class="line"><span class="comment"> *      &#125;</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> *   return fn.apply(null, args)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用并传入实参1, 2 ,3</span></span><br><span class="line">curriedFn(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><ul><li><p>当执行到curriedFn(1)时，因为args.length为1，fn.length为3所以进入if块将args的参数连接，此时args.length为2</p></li><li><p>上一步返回的还是curryInner函数，再执行curriedFn(1)(2),此时由于args.length为2还是小于3，再重复上述步骤执行curriedFn(1)(2)(3)</p></li><li><p>此时args.length为3，if条件不满足，执行fn.apply(null, args),即相当于执行了foo(1,2,3)</p></li></ul><h1 id="文献参考："><a href="#文献参考：" class="headerlink" title="文献参考："></a>文献参考：</h1><p>《JavaScript ES6 函数式编程入门经典》                            【印】Anto Aravinth 著  梁宵 译</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是函数式编程&quot;&gt;&lt;a href=&quot;#什么是函数式编程&quot; class=&quot;headerlink&quot; title=&quot;什么是函数式编程&quot;&gt;&lt;/a&gt;什么是函数式编程&lt;/h1&gt;&lt;p&gt;函数式编程，个人理解是在编写纯函数。&lt;/p&gt;
&lt;p&gt;据印度Anto Aravinth的解释的
      
    
    </summary>
    
    
      <category term="心得体会" scheme="http://yoursite.com/tags/%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>mark</title>
    <link href="http://yoursite.com/2018/02/22/mark/"/>
    <id>http://yoursite.com/2018/02/22/mark/</id>
    <published>2018-02-22T10:57:35.000Z</published>
    <updated>2018-02-22T11:04:42.194Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  test(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">SomeComponent</span> <span class="attr">callback</span>=<span class="string">&#123;(a,</span> <span class="attr">b</span>) =&gt;</span> &#123;this.test(a, b)&#125;&#125; /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">test</span>) </span>&#123;</span><br><span class="line">  test(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;SomeComponent callback=&#123;::this.test&#125; /&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="记录" scheme="http://yoursite.com/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>html5的data-*</title>
    <link href="http://yoursite.com/2018/02/12/html5%E7%9A%84data/"/>
    <id>http://yoursite.com/2018/02/12/html5的data/</id>
    <published>2018-02-12T10:51:30.000Z</published>
    <updated>2018-02-12T11:06:00.261Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>看公司的表单组件，发现一个data-name属性，这个在最早做react的todo时，遇到过，因为获取不到直接定义的属性，还写过一篇肤浅的博客。其实这个并不是react里面的内容，而是html5里面的</p><h1 id="data-用法"><a href="#data-用法" class="headerlink" title="data-*用法"></a>data-*用法</h1><p>目前我没有参考文档，所以不知道它为什么会出现，但是我知道怎么用，在什么场景用，直接讲自己理解的用法。</p><p>获取这个属性，可以利用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">domNode.getAttribute(<span class="string">'data-foo'</span>)</span><br></pre></td></tr></table></figure><p>这个其中一个应用场景就是你在react中获取节点后，想获取这个data-属性里面的值</p><p>还可以在事件对象的当前对象下的dataset属性中获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.currentTarget.dataset.foo;</span><br></pre></td></tr></table></figure><p>这个让我想到了小程序，它内部实现也估计用了这个。</p><h1 id="延伸题外话"><a href="#延伸题外话" class="headerlink" title="延伸题外话"></a>延伸题外话</h1><p>html5很重要，很多东西经常用到，我们应该怎么学习html5，我的体会是从html5名字去搜书名得到的书是不行的。但是有一本书，我最近翻了翻，发现里面有很多html5的内容，那就是大家都知道的《JavaScript高级程序设计》，很厚，一天读10页，也要很久读完，推荐大家如果忙的话，把它当字典查，当然最好是读一遍。</p><p>我之前项目搜data-name没搜到，后来看了mdn以后，我说不可能搜不到，肯定是之前没搜好，果然就是我的想法，搜到了，也是上述用法用的。</p><h1 id="REACT16以后"><a href="#REACT16以后" class="headerlink" title="REACT16以后"></a>REACT16以后</h1><p>可以不用data-*，不带data-的属性也会渲染到原生dom节点上了</p><p>更多内容待大家一起探讨，下次见</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h1&gt;&lt;p&gt;看公司的表单组件，发现一个data-name属性，这个在最早做react的todo时，遇到过，因为获取不到直接定义的属性，还写过一篇肤浅的博
      
    
    </summary>
    
    
      <category term="html5" scheme="http://yoursite.com/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>聊聊webpack</title>
    <link href="http://yoursite.com/2018/02/10/%E8%81%8A%E8%81%8Awebpack/"/>
    <id>http://yoursite.com/2018/02/10/聊聊webpack/</id>
    <published>2018-02-10T10:04:19.000Z</published>
    <updated>2018-02-10T10:24:29.309Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原创申明"><a href="#原创申明" class="headerlink" title="原创申明"></a>原创申明</h1><ul><li>该空间内所有博客所有内容均为原创，由于是个人的理解，可能有所勘误，敬请指正</li></ul><h1 id="webpack个人对它的介绍"><a href="#webpack个人对它的介绍" class="headerlink" title="webpack个人对它的介绍"></a>webpack个人对它的介绍</h1><ul><li>webpack会从一个文件或者多个文件开始，它里面的依赖的模块，会被以webpack的方式优雅的合成一个或多个bundle文件，这里是对js的构建，那么这时，你可以把它引用到html的script标签中。但是一般不是你手动引入，webpack可以帮你做到，用到的就是它的插件，包括css也是类似的道理，会被引到head的link标签里。</li><li>上述过程生成的东西会产生一个文件夹，这个文件夹你可以指定，这个文件夹包含了一套的前端所需要的东西，是什么呢？那就是现代浏览器可以执行的html，css，js。</li><li>为什么要加上现代浏览器可以执行的，因为这很重要，而且也因为我们写的代码都是浏览器不支持的，我们把这个文件夹的内容放到服务器上部署，就有一个前端的内容了。</li><li>为什么要写浏览器不支持的代码？其中很重要的一点，是程序员里面很常见的词汇，那就是优雅。对，这些代码很优雅，有很多语法糖。什么是语法糖，我个人理解，是通过约定把本来需要一大堆代码实现的东西变成简单的写法。这就很优雅，那么优雅是什么，优雅就是开发效率，与开发时的快感的增加。</li><li>webpack有很多东西在官网上浅尝则止，并没有说的很深入，如果想要深入可以阅读《深入浅出webpack》，我也在读，不过我经过搭了一个react react-router v4 按需加载的项目之后在读，体会更佳，欢迎加入。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原创申明&quot;&gt;&lt;a href=&quot;#原创申明&quot; class=&quot;headerlink&quot; title=&quot;原创申明&quot;&gt;&lt;/a&gt;原创申明&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;该空间内所有博客所有内容均为原创，由于是个人的理解，可能有所勘误，敬请指正&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=
      
    
    </summary>
    
    
      <category term="心得体会" scheme="http://yoursite.com/tags/%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>日期+学习到的知识点</title>
    <link href="http://yoursite.com/2018/01/30/%E6%97%A5%E6%9C%9F-%E5%AD%A6%E4%B9%A0%E5%88%B0%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/2018/01/30/日期-学习到的知识点/</id>
    <published>2018-01-30T13:26:20.000Z</published>
    <updated>2018-02-21T09:18:07.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018-1-30"><a href="#2018-1-30" class="headerlink" title="2018-1-30"></a>2018-1-30</h1><ul><li>css filter: drop-shadow()</li><li>sass draken()</li><li>sass placeholder</li><li>sass @include</li><li>sass @content</li><li>redux mapDispatchToProps dispatched function(bindActionCreator)</li><li>react-router onEnter hook(20%)</li><li>react-router IndexRoute IndexRedirect</li><li>高阶函数例子及定义</li></ul><h1 id="2018-2-13"><a href="#2018-2-13" class="headerlink" title="2018-2-13"></a>2018-2-13</h1><ul><li>understand es7 function bind syntax in react</li><li>review this in ecmascript</li></ul><h1 id="2018-2-17"><a href="#2018-2-17" class="headerlink" title="2018-2-17"></a>2018-2-17</h1><ul><li>currentTarget &lt;- represent registered element and equal to this in event handler</li><li>target &lt;- actual and real target in event</li><li>understand function parameters transfer by value</li></ul><h1 id="2018-2-21"><a href="#2018-2-21" class="headerlink" title="2018-2-21"></a>2018-2-21</h1><ul><li>scope chain and excution context environment</li><li>reference counting strategy of garbage collection </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2018-1-30&quot;&gt;&lt;a href=&quot;#2018-1-30&quot; class=&quot;headerlink&quot; title=&quot;2018-1-30&quot;&gt;&lt;/a&gt;2018-1-30&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;css filter: drop-shadow()&lt;/li&gt;
&lt;li&gt;s
      
    
    </summary>
    
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>陪自己走过白天黑夜</title>
    <link href="http://yoursite.com/2018/01/25/%E9%99%AA%E8%87%AA%E5%B7%B1%E8%B5%B0%E8%BF%87%E7%99%BD%E5%A4%A9%E9%BB%91%E5%A4%9C/"/>
    <id>http://yoursite.com/2018/01/25/陪自己走过白天黑夜/</id>
    <published>2018-01-25T05:13:15.000Z</published>
    <updated>2018-01-25T05:48:51.062Z</updated>
    
    <content type="html"><![CDATA[<p>cnode论坛好像是狼叔建的，一个很有趣的地方，一个卧虎藏龙的地方。</p><p>比如昨天，我在上面发现了一位我很欣赏的前辈，他叫邹业盛。起初并不认识他，我只是在cnode上面瞎逛，把一些有可能会用到帖子打开，寻找一点营养吸收一下，我在几篇可能出现干货的帖子下发现了一个人，他把问题分析得极其透彻，就是用自己的话说出来的那种，而且一看就是踩过了那些坑并有很深体会的人。我顿时在github中寻找他，还真给我找到，于是进入到他的博客里面，文章都很朴实，满满干货，还带个人体会，读完收获不小。今天仔细看他的title，原来是阿里的。</p><p>记得狼叔曾经开个一个玩笑，所有的前端程序员的归宿不是阿里就是在去阿里的路上。确实从侧面也反映了一个问题，就是阿里的员工真的很优秀。我目前网上见到的阿里的人都是很全面的人。强到可怕，普通公司的人跟阿里的一比，差距就是十万八千里，不过也夸张了一点，只是想说，他们很强。</p><p>昨天我问同事，我说你的职业规划是怎样的，他说估计以后是往管理或者创业发展。我又问其他同事，答案也差不多。我总结一下，他们的看法是35岁要做成管理或者架构师。对我来说还有10年，10年是很长的。如果这10年，每日精进，他们的想法都是可以实现的。也有很多这样的人，他们只花了几年。</p><p>链家的鸟哥说要脱离自己的舒适区，上面说的其实就要做到鸟叔说的那样才好实现。如果停留在自己的舒适区，就是网上流行的1年经验重复3年。我想的是，劳逸结合，带点紧迫感的顺其自然，这样比较适合我这种人，有松有紧。</p><p>以前迷吉他指弹的时候，老是看日本押尾桑的视频，他说学习的时候跟吉他老师交流，与同学交流进步更快，也更有乐趣。这里有两个关键词，进步和乐趣，这两点相辅相成。虽然已经工作了，我也类似的报了一个班，接触了一些朋友和老师，老师都是阿里或者一些知名公司的。于是就有了一个氛围，是在线的。我一般是看录播，因为平时都在加班。看过一遍，老师说的话对我很有指导作用。了解一些骚操作。偶尔会在群里问一下node的问题，除了node问题的基本不会问。问也是问一些通用的解决方案，也就是套路。当然我还问过狼叔，狼叔人很好的，回答也很赞。所以我学习有很多途径，一方面自己看书看博客文章，二方面工作积累用博客记录，三方面各种我自己营造的氛围，比如知识星球，微信群，qq群，报的班的资料，四方面向高手请教，论坛提问。</p><p>我的博客技术为主，辅助一些自己个人随笔，蝼蚁之词，见笑了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;cnode论坛好像是狼叔建的，一个很有趣的地方，一个卧虎藏龙的地方。&lt;/p&gt;
&lt;p&gt;比如昨天，我在上面发现了一位我很欣赏的前辈，他叫邹业盛。起初并不认识他，我只是在cnode上面瞎逛，把一些有可能会用到帖子打开，寻找一点营养吸收一下，我在几篇可能出现干货的帖子下发现了一个人
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>解决小程序音频自定义组件不同时播放问题</title>
    <link href="http://yoursite.com/2018/01/25/%E8%A7%A3%E5%86%B3%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%9F%B3%E9%A2%91%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E4%B8%8D%E5%90%8C%E6%97%B6%E6%92%AD%E6%94%BE%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/01/25/解决小程序音频自定义组件不同时播放问题/</id>
    <published>2018-01-24T16:22:07.000Z</published>
    <updated>2018-03-11T08:23:05.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>首先是一个播放的气泡，点击播放src音频，但是是一组列表，有许多这样的气泡，点其中一个播放后，再点其他的，前一个要停止播放。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>这种其实是很好实现的，如果是直接写的话。但是现在用上了小程序的自定义组件，每个组件都是独立的没有联系，唯一的联系是父组件，这个时候，我们该怎么办呢。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>由于涉及保密协议，就不上代码，说说思路。</p><p>思路：</p><ol><li>用广播，如果该组件播放时，就发出一个广播，让其他组件关闭播放。</li></ol><p>这里知识用到观察者模式（订阅与发布），具体怎么实现，有很多方式，本项目中的实现是我的师父写的，然而他写的有个地方有问题，他用了Promise处理监听的回调，然而Promise resolve以后，它的生命就到此为止了（个人目前的理解是这样的，如有勘误，请务必指出），所以只能执行一次回调，而不能多次监听，触发回调。我把这里改了，实现了一次监听，有触发随时执行。</p><ol><li>关键问题，我怎么样只广播非当前播放的气泡呢。设一个属性，每次给一个变化的值进去，利用observer确定是当前组件，当前组件执行一个逻辑，这个逻辑就是避免被广播到</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>程序出不来，大部分是代码原因，继续搞，继续搞就能看到光明。</p><p>我的每篇文章都不长，但都可以说明一个问题，欢迎阅读。</p><p>-————–update分割线 —————–</p><p>最佳实践是这样的：</p><p><a href="https://choicelin.github.io/2018/01/09/%E5%89%8D%E7%AB%AF%E5%B7%A5%E4%BD%9C%E9%81%87%E5%88%B0%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/" target="_blank" rel="noopener">前端工作遇到的小知识点</a>第14点，最好放在父组件中控制，上面操作太骚，而且后期处理起来不易维护</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h1&gt;&lt;p&gt;首先是一个播放的气泡，点击播放src音频，但是是一组列表，有许多这样的气泡，点其中一个播放后，再点其他的，前一个要停止播放。&lt;/p&gt;
&lt;h1
      
    
    </summary>
    
    
      <category term="工作经验" scheme="http://yoursite.com/tags/%E5%B7%A5%E4%BD%9C%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
</feed>
