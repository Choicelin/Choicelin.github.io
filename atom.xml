<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>1024子翔的程序人生</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-08T08:17:15.197Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Choicelin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NODE_ENV作用知多少</title>
    <link href="http://yoursite.com/2018/11/08/NODE-ENV%E4%BD%9C%E7%94%A8%E7%9F%A5%E5%A4%9A%E5%B0%91/"/>
    <id>http://yoursite.com/2018/11/08/NODE-ENV作用知多少/</id>
    <published>2018-11-08T08:13:58.000Z</published>
    <updated>2018-11-08T08:17:15.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>我们在开发的时候经常会有生产环境和开发环境，这两种环境中可能用到不同的配置，比如本地域名和线上域名，如何去区别它们，是我今天要谈到的一个问题。</p><h1 id="process对象与NODE-ENV"><a href="#process对象与NODE-ENV" class="headerlink" title="process对象与NODE_ENV"></a>process对象与NODE_ENV</h1><p>Node.js中有一个全局的对象process，这个对象无需require(),它控制着Node.js的进程的信息。</p><p>它有一个属性，叫做env。我下面将会使用这个属性，在它里面挂载一个NODE_ENV属性，我们通过这个NODE_ENV来判断开发环境和生产环境。</p><h2 id="获取NODE-ENV"><a href="#获取NODE-ENV" class="headerlink" title="获取NODE_ENV"></a>获取NODE_ENV</h2><p>由于我们有process对象，所以可以直接在任意代码处获取到NODE_ENV，并根据该对象的值判断环境，新建一个index.js，如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creator: JIZHUA&lt;413807584@qq.com&gt;</span></span><br><span class="line"><span class="comment"> * Date: 2018/11/8</span></span><br><span class="line"><span class="comment"> * Time: 3:37 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> url = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV == <span class="string">'dev'</span>) &#123;</span><br><span class="line">  url = <span class="string">`http://localhost:3000`</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  url = <span class="string">`http://www.fenxiangtech.com`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(url)</span><br></pre></td></tr></table></figure><h2 id="设置NODE-ENV"><a href="#设置NODE-ENV" class="headerlink" title="设置NODE_ENV"></a>设置NODE_ENV</h2><p>我们既然能够获取到NODE_ENV，那么我们如何设置这个NODE_ENV。即我们要在生产环境设置NODE_ENV值为production，在开发环境设置NODE_ENV的值为dev。</p><p>首先开起你的命令行，在windows下是CMD，在mac下是terminal。</p><p>windows下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set NODE_ENV=dev node index.js</span><br></pre></td></tr></table></figure><p>mac下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export NODE_ENV=dev node index.js</span><br></pre></td></tr></table></figure><p>现在在当前窗口下，输出的url就是<a href="http://localhost:3000，关闭窗口后需要重新设置" target="_blank" rel="noopener">http://localhost:3000，关闭窗口后需要重新设置</a></p><h2 id="在webstorm中设置NODE-ENV"><a href="#在webstorm中设置NODE-ENV" class="headerlink" title="在webstorm中设置NODE_ENV"></a>在webstorm中设置NODE_ENV</h2><ol><li>点击右上角的edit configuration<ul><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./NODE_ENV_1.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure></li></ul></li><li>找到environment variables</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./NODE_ENV_2.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><ol><li>设置NODE_ENV</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./NODE_ENV_3.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><h2 id="使用cross-env实现跨平台设置NODE-ENV"><a href="#使用cross-env实现跨平台设置NODE-ENV" class="headerlink" title="使用cross-env实现跨平台设置NODE_ENV"></a>使用cross-env实现跨平台设置NODE_ENV</h2><p>首先初始化一个package.json</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>然后安装cross-env</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i cross-env -D</span><br></pre></td></tr></table></figure><p>接着在package.json的scripts中加入下面的代码</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"node-test"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"cross-env NODE_ENV=dev node index.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"cross-env"</span>: <span class="string">"^5.2.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着在命令行中运行npm run test既可看到结果</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这就是NODE_ENV的作用，这个变量是自定义的名字，但是env这个属性不是哦。大家了解了吗？欢迎指正，交流！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h1&gt;&lt;p&gt;我们在开发的时候经常会有生产环境和开发环境，这两种环境中可能用到不同的配置，比如本地域名和线上域名，如何去区别它们，是我今天要谈到的一个问题
      
    
    </summary>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>近况</title>
    <link href="http://yoursite.com/2018/09/28/%E8%BF%91%E5%86%B5/"/>
    <id>http://yoursite.com/2018/09/28/近况/</id>
    <published>2018-09-28T09:00:15.000Z</published>
    <updated>2018-09-28T09:13:03.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="入秋"><a href="#入秋" class="headerlink" title="入秋"></a>入秋</h1><p>最近做了一些h5，把vue这个东西熟悉了一下。vue的生态文档基本过了一遍。</p><p>关于小程序，小程序的框架出了一个taro，这个框架比较有趣，但是对于小程序框架这种东西，坑肯定是有的。taro如果做电商小程序，应该是没得话说的。wepy和taro的文档我都改过了，我个人特别不喜欢mpvue的生态，估计是个kpi项目，已经3个月没有commit了。但是wepy2.0即将内测，感觉还是挺期待，毕竟会修复此前的组件化不完善的问题，还有一些重大bug。</p><p>关于后端的东西，最近准备看看计算机网络的课程，要体会什么是语言的无关性，就体现在这些基础的东西上，上次和栗子讨论抓包的解码问题，他说我网络知识太少了，确实惭愧，我回答大学打游戏去了，技术债总是要还的。</p><p>关于生活，最近在学驾照，特别不想去驾校，工作日且过且珍惜，都不会知道今天星期几。可怕的假期，可怕的周末</p><p>关于规划，规划就是没有规划，顺其自然，每天进步一点点，积累再积累。以前的同事都是研究生，最近他们都在校招，找的工作挺好，恭喜他们。</p><p>关于自己的爱好，最近在玩噬神者，一次10几分钟吧。</p><p>关于感情，最近家里介绍的懒得去见面了，不了了之吧。</p><p>就这样吧，下次再记录一点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;入秋&quot;&gt;&lt;a href=&quot;#入秋&quot; class=&quot;headerlink&quot; title=&quot;入秋&quot;&gt;&lt;/a&gt;入秋&lt;/h1&gt;&lt;p&gt;最近做了一些h5，把vue这个东西熟悉了一下。vue的生态文档基本过了一遍。&lt;/p&gt;
&lt;p&gt;关于小程序，小程序的框架出了一个taro，这个框
      
    
    </summary>
    
    
      <category term="心情" scheme="http://yoursite.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>ESLIN配置airbnb标准</title>
    <link href="http://yoursite.com/2018/08/25/ESLIN%E9%85%8D%E7%BD%AEairbnb%E6%A0%87%E5%87%86/"/>
    <id>http://yoursite.com/2018/08/25/ESLIN配置airbnb标准/</id>
    <published>2018-08-25T01:20:18.000Z</published>
    <updated>2018-08-25T01:36:33.667Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line">  export PKG=eslint-config-airbnb;</span><br><span class="line">  npm info &quot;$PKG@latest&quot; peerDependencies --json | command sed &apos;s/[\&#123;\&#125;,]//g ; s/: /@/g&apos; | xargs npm install --save-dev &quot;$PKG@latest&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>(linux || mac osx)</p><h2 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eslint --init</span><br></pre></td></tr></table></figure><p>选use popular style guide -&gt;接着选airbnb-&gt;根据需要选择是否要react-&gt;config格式选json</p><p>这样会创建一个.eslintrc.json</p><h2 id="IDE举例"><a href="#IDE举例" class="headerlink" title="IDE举例"></a>IDE举例</h2><ul><li>webstorm中Preference中搜索eslint然后选择automatic search，这样ide会自动寻找eslintrc</li><li>你会发现格式化的时候与eslint的配置的检查相冲突，那么需要单独配置，具体方法是根据格式化以后的报错信息在Code Style -&gt; javascript中修改格式化方式</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最可操作，最简单的方式就是这样，欢迎尝试</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装依赖&quot;&gt;&lt;a href=&quot;#安装依赖&quot; class=&quot;headerlink&quot; title=&quot;安装依赖&quot;&gt;&lt;/a&gt;安装依赖&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>css积累一</title>
    <link href="http://yoursite.com/2018/08/24/css%E7%A7%AF%E7%B4%AF%E4%B8%80/"/>
    <id>http://yoursite.com/2018/08/24/css积累一/</id>
    <published>2018-08-24T11:03:59.000Z</published>
    <updated>2018-08-24T11:13:13.517Z</updated>
    
    <content type="html"><![CDATA[<ul><li>span,text之间的换行会导致空格的出现，引出一些样式bug</li><li>border写了下方要在上方补一个透明的，同适用于padding，为了垂直居中，水平方向也是</li><li>div高度由其内部文档流元素的高度总和决定</li><li>文档流是文档内元素的流动方向</li><li>内联元素从左往右遇到宽度不够换行，英文是以单词为整体换行如果要字母截断使用word-break: break-all;否则是break-word</li><li>块级元素每一个块占一行，从上往下</li><li>span高度与字体的各种因素决定，无法确定</li><li>字体font-size大小指字最高到最低处的高度，每个字体都有建议行高，是由设计师确定的</li><li>遇到div中有内联元素要确定高度必须写height</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;span,text之间的换行会导致空格的出现，引出一些样式bug&lt;/li&gt;
&lt;li&gt;border写了下方要在上方补一个透明的，同适用于padding，为了垂直居中，水平方向也是&lt;/li&gt;
&lt;li&gt;div高度由其内部文档流元素的高度总和决定&lt;/li&gt;
&lt;li&gt;文档
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序一次性事件实现</title>
    <link href="http://yoursite.com/2018/08/24/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%80%E6%AC%A1%E6%80%A7%E4%BA%8B%E4%BB%B6%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/08/24/微信小程序一次性事件实现/</id>
    <published>2018-08-24T08:14:56.000Z</published>
    <updated>2018-08-24T08:17:46.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>在开发原生小程序时，可能会一种场景，比如我对某一个点击事件，多次点击只触发一次，这是常见的once函数做的事情，但是如何用在小程序里面呢，下面给大家看看我的处理方法。</p><h2 id="once函数"><a href="#once函数" class="headerlink" title="once函数"></a>once函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">once</span>(<span class="params">fn, context</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (fn) &#123;</span><br><span class="line"></span><br><span class="line">           fn.apply(context || <span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line"></span><br><span class="line">           fn = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小程序代码示例"><a href="#小程序代码示例" class="headerlink" title="小程序代码示例"></a>小程序代码示例</h2><ul><li>wxml</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">bindtap</span>=<span class="string">"click"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line"></span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  result: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.result = once(<span class="keyword">this</span>.actualClick, <span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  actualClick() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  click() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.result()</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">once</span>(<span class="params">fn, context</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fn) &#123;</span><br><span class="line"></span><br><span class="line">      fn.apply(context || <span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line"></span><br><span class="line">      fn = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>once返回的函数要存起来，而且只存一次，并且要获取到page实例，所以需要在onload里面初始化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h2&gt;&lt;p&gt;在开发原生小程序时，可能会一种场景，比如我对某一个点击事件，多次点击只触发一次，这是常见的once函数做的事情，但是如何用在小程序里面呢，下
      
    
    </summary>
    
    
      <category term="记录" scheme="http://yoursite.com/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>JAVA基本语法cheatsheet</title>
    <link href="http://yoursite.com/2018/08/24/JAVA%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95cheatsheet/"/>
    <id>http://yoursite.com/2018/08/24/JAVA基本语法cheatsheet/</id>
    <published>2018-08-24T07:55:37.000Z</published>
    <updated>2018-08-24T08:11:11.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><ul><li>整数</li><li>浮点数</li><li>字符</li><li>数组</li><li>布尔</li></ul><h2 id="表达式和语句"><a href="#表达式和语句" class="headerlink" title="表达式和语句"></a>表达式和语句</h2><h2 id="变量和赋值"><a href="#变量和赋值" class="headerlink" title="变量和赋值"></a>变量和赋值</h2><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><h2 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h2><h2 id="JAVA类型模型"><a href="#JAVA类型模型" class="headerlink" title="JAVA类型模型"></a>JAVA类型模型</h2><h3 id="类与对象-（抽象与具体）"><a href="#类与对象-（抽象与具体）" class="headerlink" title="类与对象 （抽象与具体）"></a>类与对象 （抽象与具体）</h3><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><ul><li>类是一个模板</li></ul><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><ul><li>JAVA语言一等公民，对象可以赋值到一个变量</li></ul><h4 id="行为与状态（方法与成员变量）"><a href="#行为与状态（方法与成员变量）" class="headerlink" title="行为与状态（方法与成员变量）"></a>行为与状态（方法与成员变量）</h4><p>执行行为改变状态</p><ul><li>成员方法</li><li>静态方法</li></ul><h4 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h4><ul><li>由方法名与参数类型确定</li></ul><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><ul><li><p>final</p><blockquote><p>类将不能继承，变量将是常量，方法防重写， 常量如果是对象其内部也是可以修改的</p></blockquote></li><li><p>访问修饰符</p></li></ul><table><thead><tr><th></th><th>public</th><th>protected</th><th>default</th><th>private</th></tr></thead><tbody><tr><td>同一个类</td><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>同一个包</td><td>1</td><td>1</td><td>1</td><td>0</td></tr><tr><td>子父类</td><td>1</td><td>1</td><td>0</td><td>0</td></tr><tr><td>不同包</td><td>1</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><h2 id="包和层次结构"><a href="#包和层次结构" class="headerlink" title="包和层次结构"></a>包和层次结构</h2><ul><li>命名空间</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本数据类型&quot;&gt;&lt;a href=&quot;#基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;基本数据类型&quot;&gt;&lt;/a&gt;基本数据类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;整数&lt;/li&gt;
&lt;li&gt;浮点数&lt;/li&gt;
&lt;li&gt;字符&lt;/li&gt;
&lt;li&gt;数组&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>JAVA学习一</title>
    <link href="http://yoursite.com/2018/08/05/JAVA%E5%AD%A6%E4%B9%A0%E4%B8%80/"/>
    <id>http://yoursite.com/2018/08/05/JAVA学习一/</id>
    <published>2018-08-05T11:35:58.000Z</published>
    <updated>2018-08-05T12:27:09.339Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>Linux是一个内核负责管理硬件的计算与存储。内核包含很多驱动，它们都是内核的一个个模块。软件驱动了硬件，向上提供了接口。</p><p>我们需要掌握的是：文件系统，内存管理（调度算法），进程，进程间通信。</p><h3 id="面向接口开发"><a href="#面向接口开发" class="headerlink" title="面向接口开发"></a>面向接口开发</h3><p>需求 =&gt; 接口 =&gt; 实现</p><h3 id="Linux架构"><a href="#Linux架构" class="headerlink" title="Linux架构"></a>Linux架构</h3><p>​    应用程序</p><p>shell     library</p><p>​    系统调用</p><p>​        内核</p><p>​    硬件</p><p>​    Linux架构</p><p>系统调用指操作系统内核提供“函数调用”，内核和应用的唯一的接口</p><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><p>/ 根目录</p><p>/home 用户目录</p><p>/var 经常变化的文件，比如日志（分区可以使用ssd硬盘）</p><p>/usr 用户程序</p><p>/bin 可执行程序</p><p>/boot 引导系统启动</p><p>/tmp 临时文件</p><p>/lib, /lib64 系统库文件</p><p>/etc 配置文件</p><p>/proc 进程信息</p><p>关于分区，我们不需要关注底层是如何分区，只需关心文件的这些目录，这样就把底层解耦了，所以文件系统也是一种接口。</p><h3 id="终端-SHELL-管道"><a href="#终端-SHELL-管道" class="headerlink" title="终端 SHELL 管道"></a>终端 SHELL 管道</h3><p>终端（终端模拟器）</p><p>SHELL 执行命令 用户与系统的交互接口</p><p>管道 连接输出与输入</p><p>程序与进程的关系，没有加载到内存中运行的叫程序，否则叫进程</p><p>Linux中一切都是文件</p><p>包括标准输入，标准输出，标准错误都是文件的名字</p><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><p>chmod修改文件权限</p><p>文件权限有10位</p><p>第一位代码文件是目录是文件还是链接，然后每隔三位代表读写可执行权限</p><p>赋权 chmod (u|g|o)  (+|-)  (r|w|x)</p><h4 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h4><p>示例</p><p>cat  a.log | grep error |wx -l </p><p>统计a.log中错误error出现的行数</p><h3 id="精髓"><a href="#精髓" class="headerlink" title="精髓"></a>精髓</h3><p>学习时整体要有一个宏观的把握，包括api层，业务逻辑层，数据存储层，每到一个阶段要知道学到哪里了。</p><blockquote><p>欢迎加入Java工坊 qq群570535816 全栈工坊qq群306204564</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Linux&quot;&gt;&lt;a href=&quot;#Linux&quot; class=&quot;headerlink&quot; title=&quot;Linux&quot;&gt;&lt;/a&gt;Linux&lt;/h2&gt;&lt;p&gt;Linux是一个内核负责管理硬件的计算与存储。内核包含很多驱动，它们都是内核的一个个模块。软件驱动了硬件，向上提供了
      
    
    </summary>
    
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>谈谈引用和求值策略</title>
    <link href="http://yoursite.com/2018/07/23/%E8%B0%88%E8%B0%88%E5%BC%95%E7%94%A8%E5%92%8C%E6%B1%82%E5%80%BC%E7%AD%96%E7%95%A5/"/>
    <id>http://yoursite.com/2018/07/23/谈谈引用和求值策略/</id>
    <published>2018-07-23T02:32:25.000Z</published>
    <updated>2018-08-05T11:35:33.580Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说说引用"><a href="#说说引用" class="headerlink" title="说说引用"></a>说说引用</h1><h2 id="值"><a href="#值" class="headerlink" title="值"></a>值</h2><p>搞清楚引用之前先看看值是什么。在计算机科学中，一个值代表了一个程序可操作控制的实体。某种数据类型的一些成员就是这种类型的一些值。</p><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>在计算机科学中，指针是一个对象，它存储了另一个在内存中值的内存地址。一个指针引用了内存中的一个位置。</p><h2 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h2><p>在计算机中，一个内存地址是一个对一块特定内存位置的引用。</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在计算机科学中，引用是一个值，它能够让程序在内存或其他设备存储中间接获取到特定的数据，比如变量的值或者一个记录。对一个给定系统中存储在内存中的引用，它的实现是数据存储在内存或其他设备存储空间中的物理地址。但是正是由于刚才这种说法导致了大家对指针和地址的错误的混淆，并说一个引用是指向了这个数据。然而，引用的可能以其他的方式来实现。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>引用不是指针，因为它可能实现方式是保存了一个物理地址，也可能是别的方式，比存的一个相对的地址偏移，而指针则是保存一个物理地址，显得更加狭义一点。同时，引用是一个值。</p><h1 id="说说求值策略"><a href="#说说求值策略" class="headerlink" title="说说求值策略"></a>说说求值策略</h1><p>求值策略是程序语言决定什么时候来求一个函数调用的实参的值，同时计算什么类型的值来传递给一个函数。</p><h2 id="通过值调用"><a href="#通过值调用" class="headerlink" title="通过值调用"></a>通过值调用</h2><p>通过值调用也被说是传递值。在这种方式中，实参表达式被计算的结果会绑定到调用后相匹配的变量上（对应于形参的位置），并且将这个值复制后放到一个新的内存区域。这种方式的特点是，函数作用域外的被传递的变量是不变的。</p><h2 id="通过引用调用"><a href="#通过引用调用" class="headerlink" title="通过引用调用"></a>通过引用调用</h2><p>通过引用调用也被说是传递引用。在这种方式中，函数接受一个变量的隐式引用作为实参，而不是它的值的拷贝。这种方式的特点是，函数作用域外被传递的变量也会被改变。</p><h2 id="通过共享调用"><a href="#通过共享调用" class="headerlink" title="通过共享调用"></a>通过共享调用</h2><p>通过共享调用也被说是通过对象或通过对象共享调用，Java，Python，JavaScript中都存在这中求值策略。关键在于传递的是一个对象，这个对象并没有被复制放到一个新的内存区域，而是在调用者和被调用者的作用域中共享着。和通过值调用的不同是，这个对象在调用者作用域中被修改了。和通过引用调用的不同是，获取值的权限并不在调用者，因为传递的不是一个引用，而是一个对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;说说引用&quot;&gt;&lt;a href=&quot;#说说引用&quot; class=&quot;headerlink&quot; title=&quot;说说引用&quot;&gt;&lt;/a&gt;说说引用&lt;/h1&gt;&lt;h2 id=&quot;值&quot;&gt;&lt;a href=&quot;#值&quot; class=&quot;headerlink&quot; title=&quot;值&quot;&gt;&lt;/a&gt;值&lt;/h2&gt;&lt;p
      
    
    </summary>
    
    
      <category term="计算机科学" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>在vue中配置使用SCSS预编译</title>
    <link href="http://yoursite.com/2018/07/18/%E5%9C%A8vue%E4%B8%AD%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8SCSS%E9%A2%84%E7%BC%96%E8%AF%91/"/>
    <id>http://yoursite.com/2018/07/18/在vue中配置使用SCSS预编译/</id>
    <published>2018-07-18T11:12:15.000Z</published>
    <updated>2018-08-05T11:35:33.580Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>vue-cli 使用webpack模板生成的项目需要引入scss预处理器，网上散人教程不够官方，这里参照官方文档写一个简化步骤</p></blockquote><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> use npm</span><br><span class="line">npm install sass-loader node-sass --save-dev</span><br><span class="line"><span class="meta">#</span> use yarn</span><br><span class="line">yarn add -D sass-loader node-sass</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bulid文件夹下的webpack base配置中的module的rules数组加入以下对象</span></span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">  loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    loaders: &#123;</span><br><span class="line">      scss: <span class="string">'vue-style-loader!css-loader!sass-loader'</span>, <span class="comment">// &lt;style lang="scss"&gt;</span></span><br><span class="line">      sass: <span class="string">'vue-style-loader!css-loader!sass-loader?indentedSyntax'</span> <span class="comment">// &lt;style lang="sass"&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>style中lang改为scss即可 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><p>需要的同学可以收藏</p><p>（逃）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;vue-cli 使用webpack模板生成的项目需要引入scss预处理器，网上散人教程不够官方，这里参照官方文档写
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>在mpvue中使用图表插件wx-charts</title>
    <link href="http://yoursite.com/2018/07/06/%E5%9C%A8mpvue%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%9B%BE%E8%A1%A8%E6%8F%92%E4%BB%B6wx-charts/"/>
    <id>http://yoursite.com/2018/07/06/在mpvue中使用图表插件wx-charts/</id>
    <published>2018-07-06T02:00:43.000Z</published>
    <updated>2018-08-05T11:35:33.580Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  大家在原生小程序中需要用到图表插件时，可能会选择echarts或者由xiaolin3303开发的一款wx-charts插件，<br>本文为大家剖析一下如何在开源小程序框架mpvue中使用wx-charts插件</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>  mpvue编译后的代码是原生的小程序代码，它把页面的wxml内容全部封成了template引入到page中。既然是最后会转为原生代码，就支持使用原生的canvas组件，这一点也是官方明确肯定的。所以在mpvue中使用wx-charts就跟在原生中使用一样，除了注意事件的绑定使用mpvue的方式即可。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>1.<br> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:xiaolin3303/wx-charts.git</span><br></pre></td></tr></table></figure></p><p>   在clone下来的dist文件夹获得wxcharts-min.js（混淆版本）,如果需要进行二次开发，可以使用wxcharts.js然后修改<br>   内容，达到定制化的目的，修改完后可以利用在线混淆进行重新混淆使用。</p><ol><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--/src/pages/bar/bar.vue template中内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">canvas-id</span>=<span class="string">"areaCanvas"</span> <span class="attr">class</span>=<span class="string">"canvas"</span> @<span class="attr">touchstart</span>=<span class="string">"touchHandler"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>3.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /src/pages/bar/bar.vue script中内容</span></span><br><span class="line"><span class="keyword">var</span> wxCharts = <span class="built_in">require</span>(<span class="string">'@/lib/wxcharts-min.js'</span>);  <span class="comment">//该路径为该js文件在你项目中的路径</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">name: <span class="string">"bar"</span>,</span><br><span class="line">data() &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">bar: <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">mounted: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> windowWidth = <span class="number">320</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">var</span> res = wx.getSystemInfoSync();</span><br><span class="line">windowWidth = res.windowWidth;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">'getSystemInfoSync failed!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.bar = <span class="keyword">new</span> wxCharts(&#123;</span><br><span class="line">canvasId: <span class="string">'areaCanvas'</span>,</span><br><span class="line">type: <span class="string">'area'</span>,</span><br><span class="line">categories: [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>],</span><br><span class="line">animation: <span class="literal">true</span>,</span><br><span class="line">series: [&#123;</span><br><span class="line">name: <span class="string">'成交量1'</span>,</span><br><span class="line">data: [<span class="number">32</span>, <span class="number">45</span>, <span class="literal">null</span>, <span class="number">56</span>, <span class="number">33</span>, <span class="number">34</span>],</span><br><span class="line">format: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> val.toFixed(<span class="number">2</span>) + <span class="string">'万'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;],</span><br><span class="line">yAxis: &#123;</span><br><span class="line">title: <span class="string">'成交金额 (万元)'</span>,</span><br><span class="line">format: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> val.toFixed(<span class="number">2</span>);</span><br><span class="line">&#125;,</span><br><span class="line">min: <span class="number">0</span>,</span><br><span class="line">fontColor: <span class="string">'#8085e9'</span>,</span><br><span class="line">gridColor: <span class="string">'#8085e9'</span>,</span><br><span class="line">titleFontColor: <span class="string">'#f7a35c'</span></span><br><span class="line">&#125;,</span><br><span class="line">xAxis: &#123;</span><br><span class="line">fontColor: <span class="string">'#7cb5ec'</span>,</span><br><span class="line">gridColor: <span class="string">'#7cb5ec'</span></span><br><span class="line">&#125;,</span><br><span class="line">extra: &#123;</span><br><span class="line">legendTextColor: <span class="string">'#cb2431'</span></span><br><span class="line">&#125;,</span><br><span class="line">width: windowWidth,</span><br><span class="line">height: <span class="number">200</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">touchHandler: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.bar.getCurrentDataIndex(e));</span><br><span class="line"><span class="keyword">this</span>.bar.showToolTip(e);</span><br><span class="line">&#125;   </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  该图表支持tooltip，这个功能比较实用，目前mpvue-echarts是不支持这一点的，但是echarts会更加美观，<br>可以根据需求取舍</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;  大家在原生小程序中需要用到图表插件时，可能会选择echarts或者由xiaolin3303开发的一款wx-charts插件，&lt;br&gt;本文
      
    
    </summary>
    
    
      <category term="心得体会" scheme="http://yoursite.com/tags/%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>浅谈BEM命名法则</title>
    <link href="http://yoursite.com/2018/07/01/%E6%B5%85%E8%B0%88BEM%E5%91%BD%E5%90%8D%E6%B3%95%E5%88%99/"/>
    <id>http://yoursite.com/2018/07/01/浅谈BEM命名法则/</id>
    <published>2018-07-01T03:16:33.000Z</published>
    <updated>2018-07-01T03:36:38.225Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h2><ul><li><p>独立的有意义的实体</p><blockquote><p>比如<code>header</code>, <code>container</code>,<code>menu</code>,<code>checkbox</code>,<code>input</code></p></blockquote></li></ul><h2 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h2><ul><li><p>Block中的没有独立意义，但是语义上与Block有联系的部分</p><blockquote><p>比如<code>menu item</code>,<code>list item</code>,<code>checkbox caption</code>,<code>title</code>,<code>header</code></p></blockquote></li></ul><h2 id="Modifier"><a href="#Modifier" class="headerlink" title="Modifier"></a>Modifier</h2><ul><li><p>Block和Element的标志，用来改变Block和Element的行为</p><blockquote><p>比如<code>disabled</code>,<code>highlighted</code>,<code>checked</code>,<code>fixed</code>,<code>size big</code>,<code>color yellow</code></p></blockquote></li></ul><h2 id="常见使用方式举例"><a href="#常见使用方式举例" class="headerlink" title="常见使用方式举例"></a>常见使用方式举例</h2><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button"</span>&gt;</span></span><br><span class="line">&gt; Normal button</span><br><span class="line">&gt; <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button button--state-success"</span>&gt;</span></span><br><span class="line">&gt; Success button</span><br><span class="line">&gt; <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button button--state-danger"</span>&gt;</span></span><br><span class="line">&gt; Danger button</span><br><span class="line">&gt; <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>上面的例子用中划线分隔的三个部分就分别是Block,Element,Modifier。为什么要使用BEM方式来命名，从表现形式来看，是为了做到防止命名冲突，同时见名知意，目前有些项目会采取这种方式。</p><p>为了防止命名冲突有一种类似的方案是CSS MODULES。</p><p>总之命名还是比较重要，大家可以自行取舍，欢迎发邮件与我讨论。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Block&quot;&gt;&lt;a href=&quot;#Block&quot; class=&quot;headerlink&quot; title=&quot;Block&quot;&gt;&lt;/a&gt;Block&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;独立的有意义的实体&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;比如&lt;code&gt;header&lt;/cod
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>读王勇人生前28年有感</title>
    <link href="http://yoursite.com/2018/06/16/%E8%AF%BB%E7%8E%8B%E5%8B%87%E4%BA%BA%E7%94%9F%E5%89%8D28%E5%B9%B4%E6%9C%89%E6%84%9F/"/>
    <id>http://yoursite.com/2018/06/16/读王勇人生前28年有感/</id>
    <published>2018-06-16T01:56:54.000Z</published>
    <updated>2018-06-16T02:37:02.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于名字"><a href="#关于名字" class="headerlink" title="关于名字"></a>关于名字</h2><p>王勇，前deepIn linux项目负责人，最近因为个人原因离职了。我也是因为公司的同事才知道他这个人的。于是想搜索一下关于他的介绍，然后搜索到了他的一篇文章《我人生的前28年》。</p><h2 id="个人感受"><a href="#个人感受" class="headerlink" title="个人感受"></a>个人感受</h2><p>整体浏览了他的文章，感觉是个做事很直接的人，学习上直击要点，如果要干什么就会直接开始从要学的入手，而且不会有科班生的畏难，可能是他最开始的时候是初生牛犊不怕虎，但是正是这种精神让他敢于去学习一门科班生可能觉得难的东西。这只是个人看法，可能他本人不是这样想的，后来他继续钻研难的技术，我觉得就是他已经掌握了一套学习的方法。他是不像很多现在的普通程序员分java还是php，他基本用什么就学什么，不会区分语言。这一点我听过一个facebook的工程师说过，facebook招人主考算法，人招进去以后，会在各个部门实习两周左右，他们要求无论是前端还是后端，只要公司需要，你都能很快的转入进去，这其实就是考验一个人的思维能力，因为语言到后面只是工具，用这个工具的还是你这个人，人的思维好了，对什么都能快速上手，并且能够举一反三。回到王勇身上，这位前辈体验到了很多人生的辛酸苦辣，但是感觉他一直在编码，这对我也是一种激励，</p><p>就是再多挫折也要抗住，就是跌到以后微笑爬起来，而且我希望国内大龄的编码者越来越多，这样就不用所谓的程序员到35岁要转管理这种说法。如果你热爱技术，为什么要转管理，好好做技术不好么。感觉很多喜欢技术的人，都是无法抗拒外界因素转的管理，当然也有最后没机会做管理被淘汰的人，所以我理想的是，没有外界因素，只有一个很直接的工作，coder，能够做到最后。但是目前IT行业年纪最大的估计国内也没有到退休年龄，这些事情不知道最后是个怎么样的。</p><h2 id="自我"><a href="#自我" class="headerlink" title="自我"></a>自我</h2><p>今后我需要学习他的钻劲，啃。无论如何，我都要微笑迎接人生的困难，最后用王勇前辈的一句话结束：</p><blockquote><p>中国教育最大的失败在于他们没有给这些未成年人看到真实残酷的社会， 他们没有教在社会上生存最重要的东西： 就是跌到以后微笑爬起来， 人在社会上最重要的就是你每天都会面对痛苦的事情， 你不喜欢的事情， 不顺心的事情， 最起码在你能力还不能支撑你个人理想的时候， 你要怎么去面对你个人， 你的家人</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于名字&quot;&gt;&lt;a href=&quot;#关于名字&quot; class=&quot;headerlink&quot; title=&quot;关于名字&quot;&gt;&lt;/a&gt;关于名字&lt;/h2&gt;&lt;p&gt;王勇，前deepIn linux项目负责人，最近因为个人原因离职了。我也是因为公司的同事才知道他这个人的。于是想搜索一下关于
      
    
    </summary>
    
    
      <category term="读后感" scheme="http://yoursite.com/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>异步流程控制的两种思路</title>
    <link href="http://yoursite.com/2018/05/15/%E5%BC%82%E6%AD%A5%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%80%9D%E8%B7%AF/"/>
    <id>http://yoursite.com/2018/05/15/异步流程控制的两种思路/</id>
    <published>2018-05-15T15:13:49.000Z</published>
    <updated>2018-05-15T15:14:34.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异步流程控制的两种思路"><a href="#异步流程控制的两种思路" class="headerlink" title="异步流程控制的两种思路"></a>异步流程控制的两种思路</h1><ul><li>第一种在异步回调里面执行操作，这是最为常见的，扩展一下可以在回调参数里面再传回调，然后这个传入的回调里面执行可以保证异步逻辑走完了</li><li>思路二，我称之为赛跑回调，跟第一种有点类似，但是有细微的区别，有一个赛跑的感觉，也是在异步回调里面注册一个回调，把数据放到回调形参，这个回调可以在其他地方调用，在其他地方使用时，判断一下数据是否到位，如果到位了执行你的逻辑，如果没到位，执行回调，接受实参，设置数据，然后再执行你的逻辑。这就好比如果接口跑的快就不用调回调，跑得慢就调，所以好像赛跑一样。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;异步流程控制的两种思路&quot;&gt;&lt;a href=&quot;#异步流程控制的两种思路&quot; class=&quot;headerlink&quot; title=&quot;异步流程控制的两种思路&quot;&gt;&lt;/a&gt;异步流程控制的两种思路&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;第一种在异步回调里面执行操作，这是最为常见的，扩展一下可
      
    
    </summary>
    
    
      <category term="ajax" scheme="http://yoursite.com/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>node写接口无响应原因总结</title>
    <link href="http://yoursite.com/2018/05/15/node%E5%86%99%E6%8E%A5%E5%8F%A3%E6%97%A0%E5%93%8D%E5%BA%94%E5%8E%9F%E5%9B%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/05/15/node写接口无响应原因总结/</id>
    <published>2018-05-15T15:12:38.000Z</published>
    <updated>2018-05-15T15:13:12.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="可能原因"><a href="#可能原因" class="headerlink" title="可能原因"></a>可能原因</h1><ul><li>路由路径不对</li><li>未调用next</li><li>中间件问题</li></ul><p>debug方法 先注释全部路由以外的中间件，然后再依次打开，看是哪个中间件出问题</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;可能原因&quot;&gt;&lt;a href=&quot;#可能原因&quot; class=&quot;headerlink&quot; title=&quot;可能原因&quot;&gt;&lt;/a&gt;可能原因&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;路由路径不对&lt;/li&gt;
&lt;li&gt;未调用next&lt;/li&gt;
&lt;li&gt;中间件问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;deb
      
    
    </summary>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>前端工作积累的知识点二</title>
    <link href="http://yoursite.com/2018/05/15/%E5%89%8D%E7%AB%AF%E5%B7%A5%E4%BD%9C%E7%A7%AF%E7%B4%AF%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9%E4%BA%8C/"/>
    <id>http://yoursite.com/2018/05/15/前端工作积累的知识点二/</id>
    <published>2018-05-15T15:10:19.000Z</published>
    <updated>2018-07-01T09:33:30.145Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>picker、scroll-view上使用flex是无效的，需要在内部嵌套一层view再使用flex效果</p></li><li><p>filter(), concat() 和 slice()均不会修改原数组而是返回一个新数组</p></li><li><p>php var_dump()查看表达式的值和类型，gettype()类似js typeof, is_type()判断是否是type类型</p></li><li><p>php 布尔字面量是大写，(bool)可以强转，但是boolean才是类型字符 falsy值： FALSE，0，0.0，””, “0”, [], NULL尚未赋值变量还有一个空标记生成的Si没票了XML对象</p></li><li><p>php round()四舍五入，int()截断，php没有整除运算符</p></li><li><p>永远不要比较两个浮点数是否相等，如果硬要比较，可以使用机器极小值（epsilon）或最小单元取整数， 是计算中所能接受的最小的差别值</p></li><li><p>NAN用is_nan比较检查</p></li><li><p>用超出字符串长度的下标写入将会拉长该字符串并以空格填充，用负数下标读取字符串时返回空字符串， 写入时只用到了赋值字符串的第一个字符。用空字符串赋值则赋给的值是 NULL 字符</p></li><li><p>strval()可以转换为字符串，TRUE会被转为”1”,FALSE会被转为””</p></li><li><p>小程序app.js中所有接口获取到的内容都可以在小程序全部页面共享，app.global,切记</p></li><li><p>open页面是为了在A小程序中分享这个open页面，然后根据options，拼参数跳转到B小程序</p></li><li><p>koa2 ctx.type可以设置Content-Type</p></li><li><p>getter 后面跟的类似function的东西，其实名字是一个对象的属性，在用取值的时候执行里面的逻辑</p></li><li><p>最佳实践，在初始化生命周期中，拿数据及其配置操作时，最好加loading，在所有数据到位以后再做处理，这也是对异步流程的一种控制，所以说异步走到最后还是类似于同步的处理，也就是异步流程控制</p></li><li><p>query需要encodeURIComponent的时候不要把整个query进行encode，而是需要排除=，&amp;这种符号，否则会出问题</p></li><li><p>做手持弹幕，旋转90度时把宽为100vh高为100vw时，变形，是因为旋转中心没有居中，先把div居中(通过定位居中，flex居中会有问题)，再旋转，注意，不是调旋转中心，而是让要旋转的div居中</p></li><li><p>做定位居中和动画同时使用不同transform时，需要在动画里重复写</p></li><li><p>设置picker-view value需要setTimeout,但是此时会触发bindchange事件，所以</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.pickChangeFlag = <span class="literal">false</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.pickChangeFlag = <span class="literal">true</span></span><br><span class="line">&#125;, <span class="number">200</span>)</span><br></pre></td></tr></table></figure></li><li><p>图片加载可以加loading效果，未加载出来的时候，加上background-image给一个loading图片</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;picker、scroll-view上使用flex是无效的，需要在内部嵌套一层view再使用flex效果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;filter(), concat() 和 slice()均不会修改原数组而是返回一个新数组&lt;/p&gt;
&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>bug心路2</title>
    <link href="http://yoursite.com/2018/05/04/bug%E5%BF%83%E8%B7%AF2/"/>
    <id>http://yoursite.com/2018/05/04/bug心路2/</id>
    <published>2018-05-03T16:55:23.000Z</published>
    <updated>2018-05-03T17:00:25.232Z</updated>
    
    <content type="html"><![CDATA[<p>今天做一个node项目，遇到一个bug，刚开始没明显报错，定位都没法定位。</p><p>至于原因是用了别人的脚手架不太熟悉，这个脚手架把错误处理都搞得较为复杂。</p><p>后来搞了很久，把脚手架里面所有的错误处理全部替换为最简单的，然后报错就来了瞬间就解决了。</p><p>关于解决问题，如果想要解决就能够解决，现在越来越能够沉着的有耐心的去解决一个问题，对于复杂的东西就简单化，记得当年听一个大哥跟一个小弟，找一个最简单的示例，这个不够简单，再找一个。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天做一个node项目，遇到一个bug，刚开始没明显报错，定位都没法定位。&lt;/p&gt;
&lt;p&gt;至于原因是用了别人的脚手架不太熟悉，这个脚手架把错误处理都搞得较为复杂。&lt;/p&gt;
&lt;p&gt;后来搞了很久，把脚手架里面所有的错误处理全部替换为最简单的，然后报错就来了瞬间就解决了。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="心得体会" scheme="http://yoursite.com/tags/%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>给今后解决bug作参考-bug心路</title>
    <link href="http://yoursite.com/2018/04/10/%E7%BB%99%E4%BB%8A%E5%90%8E%E8%A7%A3%E5%86%B3bug%E4%BD%9C%E5%8F%82%E8%80%83-bug%E5%BF%83%E8%B7%AF/"/>
    <id>http://yoursite.com/2018/04/10/给今后解决bug作参考-bug心路/</id>
    <published>2018-04-10T12:57:59.000Z</published>
    <updated>2018-04-11T03:13:15.882Z</updated>
    
    <content type="html"><![CDATA[<ol><li>解决标准分bug的过程，或许对以后会有所启示，首先觉得是对的，与测试沟通，然后需求说确认要改，然后改，发现代码确实是跳结果页，找不到原因，询问小师父，发现是后台接口的一个问题导致不能支付，然后支付试一下，可以了，但是页面白屏，停一下，到这一步其实是关键，这个白屏的链接获取到，这是个突破点，然后就靠自己了，发现在结果页又发生了跳转，是一个参数控制是否跳转，打印该参数为undefined，取反，正好是触发了跳转，问题就集中在这里，继续刷新看获取该参数的接口跑了没，发现跑了，看是不是时机不对,果然，在render中写跳转，redux中数据还没有过来，换到componentWillReceiveProps里面，成功，bug终结</li></ol><p>思考：为什么自己没有坚持到找到白屏链接那一步？值得反思。值得赞赏的是，找到突破口以后，每一步的决策都是对的，从发现突破口到解决只花了很短一段时间。今后应该如何参考这个？首先，我少了一步，就是重现这个bug，只看代码，而不实际去测一下，值得批评。加油，阿翔，今后要成为全栈哦，从自己能够做的入手，不要跟别人比，脚踏实地去做。</p><p>分享一下，与我共勉</p><hr><p>第二天一来，发现事情并没有结束，支付以后还是跳回stats，没有考虑到一点，componentWillReceiveProps是服务全局的，任何新props来都会触发，就可能出现undefined的情况。</p><p>又要批评一下，改完了还是要自己多测一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;解决标准分bug的过程，或许对以后会有所启示，首先觉得是对的，与测试沟通，然后需求说确认要改，然后改，发现代码确实是跳结果页，找不到原因，询问小师父，发现是后台接口的一个问题导致不能支付，然后支付试一下，可以了，但是页面白屏，停一下，到这一步其实是关键，这个白屏
      
    
    </summary>
    
    
      <category term="程序人生" scheme="http://yoursite.com/tags/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习笔记</title>
    <link href="http://yoursite.com/2018/04/06/mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/04/06/mysql学习笔记/</id>
    <published>2018-04-06T00:17:08.000Z</published>
    <updated>2018-04-17T02:46:18.679Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mysql命令行"><a href="#mysql命令行" class="headerlink" title="mysql命令行"></a>mysql命令行</h2><h3 id="mysql登录"><a href="#mysql登录" class="headerlink" title="mysql登录"></a>mysql登录</h3><ul><li><p>查看版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -V</span><br></pre></td></tr></table></figure></li><li><p>root权限登录 p密码 P端口 h主机地址 回车后输入密码或者-p后跟密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p -P3306 -h127.0.0.1</span><br></pre></td></tr></table></figure></li></ul><h3 id="登录后退出"><a href="#登录后退出" class="headerlink" title="登录后退出"></a>登录后退出</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exit;</span><br><span class="line">quit;</span><br><span class="line">\q;</span><br></pre></td></tr></table></figure><h3 id="修改提示符"><a href="#修改提示符" class="headerlink" title="修改提示符"></a>修改提示符</h3><ul><li>\D完整日期 \d当前数据库 \h服务器名称\u当前用户   可以互相组合</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -proot --prompt \h</span><br></pre></td></tr></table></figure><ul><li>登录以后</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prompt mysql&gt;</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li><p>查版本、显示当前日期、显示当前用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT VERSION();</span><br><span class="line">SELECT NOW();</span><br><span class="line">SELECT USER();</span><br></pre></td></tr></table></figure></li></ul><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><ul><li>关键字、函数名称全部大写</li><li>数据库名称、表名称、字段名称全部小写</li><li>SQL语句必须以分号结尾</li></ul><h3 id="创建数据库示例"><a href="#创建数据库示例" class="headerlink" title="创建数据库示例"></a>创建数据库示例</h3><ul><li><p>最简单的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE t1;</span><br></pre></td></tr></table></figure></li><li><p>在未存在该数据库时才创建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS t1;</span><br></pre></td></tr></table></figure><blockquote><p>此时数据库存在，所以可以用SHOW WARNINGS;查看警告信息，SHOW CREATE DATABASE t1;可以查看创建t1的命令</p></blockquote></li><li><p>再加入编码方式</p></li></ul>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXIST t2 CHARACTER SET gbk;</span><br></pre></td></tr></table></figure><blockquote><p>如果想修改编码方式则参考下面的内容</p></blockquote><h3 id="查看当前服务器下的数据列表"><a href="#查看当前服务器下的数据列表" class="headerlink" title="查看当前服务器下的数据列表"></a>查看当前服务器下的数据列表</h3><ul><li><p>基本示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES;</span><br></pre></td></tr></table></figure></li></ul><h3 id="修改数据库示例"><a href="#修改数据库示例" class="headerlink" title="修改数据库示例"></a>修改数据库示例</h3><ul><li><p>修改除了没有IF NOT EXISTS 和 CREATE改为ALTER其他部分都一样，下面修改字符集</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER DATABASE t1 CHARACTER SET utf8;</span><br></pre></td></tr></table></figure></li></ul><h3 id="删除数据库示例"><a href="#删除数据库示例" class="headerlink" title="删除数据库示例"></a>删除数据库示例</h3><ul><li><p>删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE IF EXISTS t1;</span><br></pre></td></tr></table></figure></li></ul><h2 id="MySQL数据类型"><a href="#MySQL数据类型" class="headerlink" title="MySQL数据类型"></a>MySQL数据类型</h2><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><ul><li>TINYINT(-128-127,0-255) 1字节</li><li>SMALLINT(-32768-32767,0-65535) 2字节</li><li>MEDIUMINT(-8388608-8388607,0-4294967295) 3字节</li><li>INT(-2^31-2^31-1,0-2^32-1) 4字节</li><li>BIGINT(-2^63–2^63-1,0-2^64-1) 8字节</li></ul><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><ul><li>FLOAT[(M,D)]    M表示总位数D表示小数位数（小数最大7位）</li><li>DOUBLE[(M,D)] </li></ul><h3 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h3><ul><li>YEAR 1</li><li>TIME 3</li><li>DATE 3</li><li>DATETIME 8</li><li>TIMESTAMP(时间戳) 4</li></ul><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><ul><li>CHAR(M)   0&lt;=M&lt;=255字节  定长类型，不足以空格补位</li><li>VARCHAR(M)  L+1个字节，其中L&lt;=M且0&lt;=M&lt;=65535  变长类型，有多长存多长</li><li>TINYTEXT L+1个字节，其中L&lt;2^8</li><li>TEXT L+2个字节，其中L&lt;2^16</li><li>MEDIUMTEXT 3 24</li><li>LONGTEXT 4 32</li><li>ENUM(‘value1’,’value2’,…) 1或2个字节，取决于枚举个数（最多65535个值）</li><li>SET(‘value1’,’value2’,…) 1 2 3 4 8字节 取决于SET成员的数目最大64个成员</li></ul><h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><h3 id="USE"><a href="#USE" class="headerlink" title="USE"></a>USE</h3><ul><li><p>打开数据库(必须已经创建或已存在)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE t1;</span><br></pre></td></tr></table></figure></li></ul><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><ul><li><p>创建一个存储用户信息的表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tb1(</span><br><span class="line">username VARCHAR(20),</span><br><span class="line">age TINYINT UNSIGNED,</span><br><span class="line">salary FLOAT(8,2) UNSIGHED</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h3 id="查看数据表"><a href="#查看数据表" class="headerlink" title="查看数据表"></a>查看数据表</h3><ul><li><p>查看数据表列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW TABLES [FROM dbName(mysql)];</span><br></pre></td></tr></table></figure></li></ul><h3 id="查看数据表结构"><a href="#查看数据表结构" class="headerlink" title="查看数据表结构"></a>查看数据表结构</h3><ul><li><p>查看表结构是查看列</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW COLUMNS FROM tb1;</span><br></pre></td></tr></table></figure></li></ul><h3 id="插入记录与查询记录"><a href="#插入记录与查询记录" class="headerlink" title="插入记录与查询记录"></a>插入记录与查询记录</h3><ul><li><p>插入记录示例，如果省略列名称，需要全部赋值，还是以上面创建的用户信息表举例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT tb1 VALUES('Anger', 21, 7863.25);</span><br></pre></td></tr></table></figure></li><li><p>插入记录示例,不省略列名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT tb1(username, age) VALUES('Kira', 25);</span><br></pre></td></tr></table></figure></li><li><p>简单查询示例，*匹配的是字段而不是记录，有人会说*是匹配所有记录，这是有点问题的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM tb1;</span><br></pre></td></tr></table></figure></li></ul><h2 id="空值与非空"><a href="#空值与非空" class="headerlink" title="空值与非空"></a>空值与非空</h2><ul><li>NULL 字段值可以为空，设置的时候可以省略</li><li>NOT NULL 字段值禁止为空</li></ul><h2 id="自动编号"><a href="#自动编号" class="headerlink" title="自动编号"></a>自动编号</h2><ul><li>自动编号，必须与主键结合使用</li><li>默认情况下，起始值为1，每次的增量为1</li></ul><h2 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h2><ul><li><p>一张数据表中只能存在一个主键</p></li><li><p>主键保证记录的唯一性</p></li><li><p>主键自动为NOT NULL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tb3(</span><br><span class="line">id SMALLINT UNSIGHED AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">username VARCHAR(20) NOT NULL</span><br><span class="line">);</span><br><span class="line">SHOW COLUMNS FROM tb3;</span><br><span class="line">INSERT tb3(username) VALUES('Kira');</span><br><span class="line">SELECT * FROM tb3;</span><br></pre></td></tr></table></figure></li></ul><h2 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h2><ul><li>唯一约束可以保证记录的唯一性</li><li>唯一约束的字段可以为空值（NULL）</li><li>每张数据表可以存在多个唯一约束</li></ul><h2 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h2><ul><li><p>当插入记录时，如果未明确为字段赋值，则会赋予默认值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tb4(</span><br><span class="line">id SMALLINT NOT NULL AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">username VARCHAR(20) NOT NULL UNIQUE KEY,</span><br><span class="line">sex ENUM('1', '2', '3') DEFAULT '3'</span><br><span class="line">);</span><br><span class="line">SHOW COLUMNS FROM tb4;</span><br><span class="line">INSERT tb6(username, sex) VALUES('Tom', 1);</span><br><span class="line">INSERT tb6(username) VALUES('Rose');</span><br></pre></td></tr></table></figure></li></ul><h2 id="再谈约束"><a href="#再谈约束" class="headerlink" title="再谈约束"></a>再谈约束</h2><ol><li>约束保证数据的完整性和一致性</li><li>约束分为表级约束和列级约束，如果约束只针对某一个字段来约束，我们称之为列级约束，如果针对两个或两个以上字段来使用约束，则成为表级约束</li><li>约束类型包括（按功能分类）<ul><li>NOT NULL (非空约束)</li><li>PRIMARY KEY(主键约束)</li><li>UNIQUE KEY(唯一约束)</li><li>DEFAULT(默认约束)</li><li>FOREIGN KEY(外键约束)</li></ul></li></ol><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><ol><li>保持数据完整性和一致性</li><li>实现一对一或一对多的关系</li></ol><h3 id="外键约束要求"><a href="#外键约束要求" class="headerlink" title="外键约束要求"></a>外键约束要求</h3><ol><li>父表和子表必须使用相同的存储引擎，而且禁止使用临时表</li><li>数据表的存储引擎只能为InnoDB</li><li>外键列和参照列必须具有相似的数据类型。其中数字的长度或是是否有符号位必须相同，而字符长度则可以不同</li><li>外键列和参照列必须创建索引。如果外键列不存在索引的话，MySQL将会自动创建索引</li></ol><p>PS : </p><ul><li>子表是具有外键列的表，而子表所参照的表叫父表</li><li>外键列是加过FOREIGN关键字的列，而参照列则是外键列参照的列</li></ul><h4 id="编辑数据表的默认存储引擎"><a href="#编辑数据表的默认存储引擎" class="headerlink" title="编辑数据表的默认存储引擎"></a>编辑数据表的默认存储引擎</h4><ul><li><p>MySQL配置文件my.ini,修改完需重启MySQL服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default-storage-engine=INNODB</span><br></pre></td></tr></table></figure></li></ul><h3 id="外键约束示例"><a href="#外键约束示例" class="headerlink" title="外键约束示例"></a>外键约束示例</h3><ul><li><p>省份表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE provinces(</span><br><span class="line">id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">pname VARCAHR(20) NOT NULL</span><br><span class="line">);</span><br><span class="line">SHOW CREATE TABLE provinces;</span><br></pre></td></tr></table></figure></li><li><p>用户表,pid参照省份表（父表）的id字段</p></li></ul>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE users(</span><br><span class="line">  id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  username VARCHAR(10) NOT NULL,</span><br><span class="line">  pid BIGINT,</span><br><span class="line">  FOREIGN KEY (pid) REFERENCES provinces (id)</span><br><span class="line">  );</span><br></pre></td></tr></table></figure><p>  上述操作会报错，因为父表的id与子表的pid数据类型不相似</p><ul><li><p>修正后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE users(</span><br><span class="line"> id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line"> username VARCHAR(10) NOT NULL,</span><br><span class="line"> pid SMALLINT UNSIGNED,</span><br><span class="line"> FOREIGN KEY (pid) REFERENCES provinces(id)</span><br><span class="line"> );</span><br></pre></td></tr></table></figure></li></ul><h3 id="外键约束的参照操作"><a href="#外键约束的参照操作" class="headerlink" title="外键约束的参照操作"></a>外键约束的参照操作</h3><blockquote><p>这些操作是指在进行外键约束的情况下，在更新表的时候，子表是否也进行相应的操作</p></blockquote><ul><li><p>CASCADE</p><blockquote><p>父表更新或删除行，也会更新或删除子表中匹配的行。而且插入数据时必须先在父表中插入，然后才能在子表中插入，原因是子表是参照父表的信息，如果没有父表信息，将导致子表无法参照</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE users1(</span><br><span class="line">id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">username VARCHAR(20) NOT NULL,</span><br><span class="line">pid SMALLINT UNSIGNED,</span><br><span class="line">FOREIGN KEY (pid) REFERENCES provinces (id) ON DELETE CASCADE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">SHOW CREATE TABLE users1;</span><br><span class="line"></span><br><span class="line">INSERT provinces(pname) VALUES('A');</span><br><span class="line">INSERT provinces(pname) VALUES('B');</span><br><span class="line">INSERT provinces(pname) VALUES('C');</span><br><span class="line"></span><br><span class="line">SELECT * FROM provinces;</span><br><span class="line"></span><br><span class="line">INSERT users1(username, pid) VALUES('Tom', 3);</span><br><span class="line">INSERT users1(username, pid) VALUES('John', 1);</span><br><span class="line">INSERT users1(username, pid) VALUES('Rose', 3);</span><br><span class="line"></span><br><span class="line">SELECT * FROM users1;</span><br><span class="line"></span><br><span class="line">DELETE FROM provinces WHERE id = 3;</span><br><span class="line"></span><br><span class="line">SELECT * FROM provinces;</span><br><span class="line">SELECT * FROM users1;</span><br></pre></td></tr></table></figure></li><li><p>SET NULL</p><blockquote><p>父表删除和更新行时，会设置子表中的外键列为NULL，但是必须在子表外键列没有设置NOT NULL的情况下</p></blockquote></li><li><p>RESTRICT</p><blockquote><p>拒绝对父表进行删除和更新操作</p></blockquote></li><li><p>NO ACTION</p><blockquote><p>与RESTRICT相同</p></blockquote></li></ul><blockquote><p>在实际操作中，很少使用物理外键约束操作，而使用逻辑外键约束操作，原因是物理外键约束只有INNODB引擎才支持，逻辑外键就是我们在定义两张表的结构的时候，我们是按照存在着某种结构的方式去定义，但是不去使用FOREIGN KEY这个关键词来定义</p></blockquote><h3 id="表级约束与列级约束"><a href="#表级约束与列级约束" class="headerlink" title="表级约束与列级约束"></a>表级约束与列级约束</h3><blockquote><p>如果按照功能划分会有主键约束，非空约束，唯一约束。而如果按照参照操作数目的多少来划分，则有表级和列级约束</p></blockquote><ul><li><p>列级约束</p><blockquote><p>对一个列创建的约束，既可以在列定义时声明，也可以在列定义后声明</p></blockquote></li><li><p>表级约束</p><blockquote><p>对多个列创建的约束，只可以在列定义后声明</p></blockquote></li></ul><h3 id="修改数据表"><a href="#修改数据表" class="headerlink" title="修改数据表"></a>修改数据表</h3><blockquote><p>数据表的修改无非就是列的增加，列的删除，约束的添加，约束的删除等等一些操作</p></blockquote><ul><li><p>添加单列</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SHOW COLUMNS FROM users1;</span><br><span class="line"></span><br><span class="line">ALTER TABLE users1 ADD age TINYINT UNSIGNED NOT NULL DEFAULT 10;</span><br><span class="line">ALTER TABLE users1 ADD password VARCHAR(32) NOT NULL AFTER username;</span><br><span class="line">ALTER TABLE users1 ADD realname VARCHAR(20) NOT NULL FIRST;</span><br></pre></td></tr></table></figure></li><li><p>添加多列</p><blockquote><p>与上面的语法相似，在ADD后面加上括号，不能指定位置关系（FIRST,AFTER）</p></blockquote></li><li><p>删除列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE users1 DROP realname;</span><br><span class="line"></span><br><span class="line">SHOW COLUMNS FROM users1;</span><br><span class="line"></span><br><span class="line">ALTER TABLE users1 DROP username, DROP age;</span><br></pre></td></tr></table></figure></li><li><p>添加主键约束(默认B tree索引)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE users2(</span><br><span class="line">username VARCHAR(10) NOT NULL,</span><br><span class="line">pid SMALLINT UNSIGNED</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">SHOW CREATE TABLE users2;</span><br><span class="line"></span><br><span class="line">ALTER TABLE users2 ADD id SMALLINT UNSIGNED;</span><br><span class="line">ALTER TABLE users2 ADD CONSTRAINT PK_users2_id PRIMARY KEY (id);</span><br></pre></td></tr></table></figure></li><li><p>添加唯一约束</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE users2 ADD UNIQUE username;</span><br></pre></td></tr></table></figure></li><li><p>添加外键约束</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE users2 ADD FOREIGN KEY (pid) REFERENCES provinces (id);</span><br></pre></td></tr></table></figure></li><li><p>添加或删除默认约束</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE users2 ADD age SMALLINT UNSIGNED NOT NULL;</span><br><span class="line">ALTER TABLE users2 ALTER age SET DEFAULT 15;</span><br><span class="line">ALTER TABLE users2 ALTER age DROP DEFAULT;</span><br></pre></td></tr></table></figure></li><li><p>删除主键约束</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE users2 DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure></li><li><p>删除唯一约束 \G指以网格方式呈现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHOW INDEXES FROM users2\G;</span><br><span class="line">ALTER TABLE users2 DROP INDEX username;</span><br></pre></td></tr></table></figure></li><li><p>删除外键约束</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE TABLE users2;</span><br><span class="line">ALTER TABLE users2 DROP FOREIGN KEY users2_ibfk_1;</span><br></pre></td></tr></table></figure></li></ul><h3 id="修改列定义"><a href="#修改列定义" class="headerlink" title="修改列定义"></a>修改列定义</h3><ul><li><p>位置或列的类型有问题，是可以修改的,由大类型修改到小类型可能造成数据丢失</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE users2 MODIFY id SMALLINT UNSIGNED NOT NULL FIRST;</span><br><span class="line">SHOW COLUMNS FROM users2;</span><br></pre></td></tr></table></figure></li></ul><h3 id="修改列名称"><a href="#修改列名称" class="headerlink" title="修改列名称"></a>修改列名称</h3><ul><li><p>既可以修改到列名称又可以修改到列定义</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE users2 CHANGE pid p_id TINYINT UNSIGNED NOT NULL;</span><br><span class="line">SHOW COLUMNS FROM users2;</span><br></pre></td></tr></table></figure></li></ul><h3 id="修改数据表名称"><a href="#修改数据表名称" class="headerlink" title="修改数据表名称"></a>修改数据表名称</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE users2 RENAME users3;</span><br><span class="line"></span><br><span class="line">RENAME TABLE users3 to users2;</span><br></pre></td></tr></table></figure><h2 id="操作数据表中的记录"><a href="#操作数据表中的记录" class="headerlink" title="操作数据表中的记录"></a>操作数据表中的记录</h2><h3 id="插入记录"><a href="#插入记录" class="headerlink" title="插入记录"></a>插入记录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE users(</span><br><span class="line">id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">username VARCHAR(20) NOT NULL,</span><br><span class="line">password VARCHAR(32) NOT NULL,</span><br><span class="line">age TINYINT UNSIGNED NOT NULL DEFAULT 10,</span><br><span class="line">sex BOOLEAN </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT users VALUES(NULL, 'Tom', '123456', 15, 1);</span><br><span class="line">INSERT users VALUES(DEFAULT, 'John', '321', 15, 1);</span><br><span class="line">INSERT users SET username='Ben', password='456';</span><br></pre></td></tr></table></figure><h3 id="更新记录（单表更新）"><a href="#更新记录（单表更新）" class="headerlink" title="更新记录（单表更新）"></a>更新记录（单表更新）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">users</span> <span class="keyword">SET</span> age = age + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">users</span> <span class="keyword">SET</span> age = age - <span class="keyword">id</span>, sex = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">users</span> <span class="keyword">SET</span> age = age + <span class="number">10</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> % <span class="number">2</span> = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="删除记录（单表删除）"><a href="#删除记录（单表删除）" class="headerlink" title="删除记录（单表删除）"></a>删除记录（单表删除）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">6</span>;</span><br></pre></td></tr></table></figure><h3 id="查询记录"><a href="#查询记录" class="headerlink" title="查询记录"></a>查询记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, username <span class="keyword">FROM</span> <span class="keyword">users</span>;</span><br><span class="line"><span class="keyword">SELECT</span> username, <span class="keyword">id</span> <span class="keyword">FROM</span> <span class="keyword">users</span>;</span><br><span class="line"><span class="keyword">SELECT</span> users.id, users.username <span class="keyword">FROM</span> <span class="keyword">users</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">AS</span> userId, username <span class="keyword">AS</span> uname <span class="keyword">FROM</span> <span class="keyword">users</span>;</span><br></pre></td></tr></table></figure><p>( 未完待续)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;mysql命令行&quot;&gt;&lt;a href=&quot;#mysql命令行&quot; class=&quot;headerlink&quot; title=&quot;mysql命令行&quot;&gt;&lt;/a&gt;mysql命令行&lt;/h2&gt;&lt;h3 id=&quot;mysql登录&quot;&gt;&lt;a href=&quot;#mysql登录&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>css可以继承的属性</title>
    <link href="http://yoursite.com/2018/04/04/css%E5%8F%AF%E4%BB%A5%E7%BB%A7%E6%89%BF%E7%9A%84%E5%B1%9E%E6%80%A7/"/>
    <id>http://yoursite.com/2018/04/04/css可以继承的属性/</id>
    <published>2018-04-03T22:16:29.000Z</published>
    <updated>2018-04-03T22:43:32.278Z</updated>
    
    <content type="html"><![CDATA[<ol><li>font-size</li><li>text-indent</li><li>text-align</li><li>line-height</li><li>word-spacing</li><li>letter-spacing</li><li>text-transform</li><li>color</li><li>visibility</li><li>cursor</li><li>direction</li><li>font</li><li>font-family</li><li>font-style</li><li>font-weight</li><li>list-style</li></ol><p>———————————————— 不常用 —————————————————–</p><ol><li>caption-side</li><li>font-variant</li><li>list-style-position</li><li>list-style-type</li><li>border-collapse</li><li>border-spacing</li><li>empty-cells</li><li>table-layout</li><li>list-style-type</li><li>list-style-image</li><li>quotes</li><li>page</li><li>page-break-inside</li><li>widows</li><li>orphans</li><li>speak</li><li>speak-punctuation</li><li>speak-numeral</li><li>speak-header</li><li>speech-rate</li><li>volume</li><li>voice-family</li><li>pitch</li><li>pitch-range</li><li>stress</li><li>richness</li><li>azimuth</li><li>​</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;font-size&lt;/li&gt;
&lt;li&gt;text-indent&lt;/li&gt;
&lt;li&gt;text-align&lt;/li&gt;
&lt;li&gt;line-height&lt;/li&gt;
&lt;li&gt;word-spacing&lt;/li&gt;
&lt;li&gt;letter-spacing&lt;/li&gt;
&lt;li&gt;text
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>不要做一个初级工程师（译）</title>
    <link href="http://yoursite.com/2018/03/24/%E4%B8%8D%E8%A6%81%E5%81%9A%E4%B8%80%E4%B8%AA%E5%88%9D%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%EF%BC%88%E8%AF%91%EF%BC%89/"/>
    <id>http://yoursite.com/2018/03/24/不要做一个初级工程师（译）/</id>
    <published>2018-03-24T00:35:12.000Z</published>
    <updated>2018-03-24T02:22:53.415Z</updated>
    
    <content type="html"><![CDATA[<p>本文由林子翔翻译于<a href="https://hackernoon.com/dont-be-a-junior-developer-608c255b3056" target="_blank" rel="noopener">原文链接</a></p><ul><li><p>严肃地说，不要做一个初级工程师。一个初级工程师，把这个头衔放到他简历，邮箱和其他社交信息里，把它告诉世界。不要这样！</p></li><li><p>当你这样做了，人事和公司会这样看</p><blockquote><p>你好，我拼命想成为你们公司的一名开发者。我还是个新手，但是请你请你请你请请你在我身上赌一把而且希望我能够成为公司的一笔财富而不是债务，而且我在前6个月还需要其他同事的帮助。。。</p></blockquote></li><li><p>但是你说你就是一个初级工程师。这样的话，如果你专注于提高自己的技能去成为中级工程师会获得长远的成功，只有这样你才应该去申请一个工作。当你奉献你全部的时间去学习合理的技能，这时，你并不用把自己归为一个初级工程师这个品牌。记住，第一印象是很重要的，通过被录用为初级工程师，你将花费很长一段时间来摆脱这个头衔。如果你花一段时间去适应中级这个头衔，你将很快被录用为一个中级工程师。</p></li><li><p>但是你会问，什么时候你才知道自己不是一个中级工程师呢？你将永远不会知道。你将总是觉得自己知道得不够多，你将总是觉得其他人比你聪明，这被称作<a href="https://medium.com/@aliciatweet/overcoming-impostor-syndrome-bdae04e46ec5" target="_blank" rel="noopener">冒充者综合症</a>。这很正常，大部分开发者都会有这个症状。但是这里有一个小的测试针对网站开发者：你能清晰地给家人介绍Internet怎样工作？电脑怎么工作？网站怎么工作？是否对HTML,CSS,JavaScript有基础的认识而能够做一个网站？知道一点React吗？能够通过github做几个项目并不费力地发布到线上？如果以上你都能做到，很好，你不是一个初级的工程师。</p></li><li><p>但是，你说你现在就需要一个工作。停止这个不长远的想法。除非你的工作是被一群特别优秀一批人所围绕然后可以每天从他们那里学习到东西，而且是最新的相关技术。你的时间将会投资到学习技能去摆脱初级头衔。长远的来看，可能你会得到更多的钱、处在一个更好的团队、而且你将更可能去为一个可以教你和使用前沿技术的公司每天工作。不要做一个常驻的法律公司开发者，去做什么WordPress插件这种。那将不会长远的帮助你。</p></li></ul><p>注：这篇文章有点广告性质，所以只翻译了核心观点，作为一个开发者可以参考一下他的观点，个人觉得自己也有冒充者综合症，对该作者的大部分的观点是比较赞成的，但是我觉得有时候找工作涉及到的因素很多，这里有点片面，但不失为一篇不错的文章。这个冒充者综合症乃是直译，欢迎围观者提出更准确的翻译。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文由林子翔翻译于&lt;a href=&quot;https://hackernoon.com/dont-be-a-junior-developer-608c255b3056&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p
      
    
    </summary>
    
    
      <category term="翻译" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
</feed>
